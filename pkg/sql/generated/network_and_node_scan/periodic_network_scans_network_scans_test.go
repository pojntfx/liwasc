// Code generated by SQLBoiler 3.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testPeriodicNetworkScansNetworkScans(t *testing.T) {
	t.Parallel()

	query := PeriodicNetworkScansNetworkScans()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testPeriodicNetworkScansNetworkScansDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PeriodicNetworkScansNetworkScan{}
	if err = randomize.Struct(seed, o, periodicNetworkScansNetworkScanDBTypes, true, periodicNetworkScansNetworkScanColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PeriodicNetworkScansNetworkScan struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := PeriodicNetworkScansNetworkScans().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPeriodicNetworkScansNetworkScansQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PeriodicNetworkScansNetworkScan{}
	if err = randomize.Struct(seed, o, periodicNetworkScansNetworkScanDBTypes, true, periodicNetworkScansNetworkScanColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PeriodicNetworkScansNetworkScan struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := PeriodicNetworkScansNetworkScans().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := PeriodicNetworkScansNetworkScans().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPeriodicNetworkScansNetworkScansSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PeriodicNetworkScansNetworkScan{}
	if err = randomize.Struct(seed, o, periodicNetworkScansNetworkScanDBTypes, true, periodicNetworkScansNetworkScanColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PeriodicNetworkScansNetworkScan struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := PeriodicNetworkScansNetworkScanSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := PeriodicNetworkScansNetworkScans().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPeriodicNetworkScansNetworkScansExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PeriodicNetworkScansNetworkScan{}
	if err = randomize.Struct(seed, o, periodicNetworkScansNetworkScanDBTypes, true, periodicNetworkScansNetworkScanColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PeriodicNetworkScansNetworkScan struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := PeriodicNetworkScansNetworkScanExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if PeriodicNetworkScansNetworkScan exists: %s", err)
	}
	if !e {
		t.Errorf("Expected PeriodicNetworkScansNetworkScanExists to return true, but got false.")
	}
}

func testPeriodicNetworkScansNetworkScansFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PeriodicNetworkScansNetworkScan{}
	if err = randomize.Struct(seed, o, periodicNetworkScansNetworkScanDBTypes, true, periodicNetworkScansNetworkScanColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PeriodicNetworkScansNetworkScan struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	periodicNetworkScansNetworkScanFound, err := FindPeriodicNetworkScansNetworkScan(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if periodicNetworkScansNetworkScanFound == nil {
		t.Error("want a record, got nil")
	}
}

func testPeriodicNetworkScansNetworkScansBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PeriodicNetworkScansNetworkScan{}
	if err = randomize.Struct(seed, o, periodicNetworkScansNetworkScanDBTypes, true, periodicNetworkScansNetworkScanColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PeriodicNetworkScansNetworkScan struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = PeriodicNetworkScansNetworkScans().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testPeriodicNetworkScansNetworkScansOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PeriodicNetworkScansNetworkScan{}
	if err = randomize.Struct(seed, o, periodicNetworkScansNetworkScanDBTypes, true, periodicNetworkScansNetworkScanColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PeriodicNetworkScansNetworkScan struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := PeriodicNetworkScansNetworkScans().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testPeriodicNetworkScansNetworkScansAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	periodicNetworkScansNetworkScanOne := &PeriodicNetworkScansNetworkScan{}
	periodicNetworkScansNetworkScanTwo := &PeriodicNetworkScansNetworkScan{}
	if err = randomize.Struct(seed, periodicNetworkScansNetworkScanOne, periodicNetworkScansNetworkScanDBTypes, false, periodicNetworkScansNetworkScanColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PeriodicNetworkScansNetworkScan struct: %s", err)
	}
	if err = randomize.Struct(seed, periodicNetworkScansNetworkScanTwo, periodicNetworkScansNetworkScanDBTypes, false, periodicNetworkScansNetworkScanColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PeriodicNetworkScansNetworkScan struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = periodicNetworkScansNetworkScanOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = periodicNetworkScansNetworkScanTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := PeriodicNetworkScansNetworkScans().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testPeriodicNetworkScansNetworkScansCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	periodicNetworkScansNetworkScanOne := &PeriodicNetworkScansNetworkScan{}
	periodicNetworkScansNetworkScanTwo := &PeriodicNetworkScansNetworkScan{}
	if err = randomize.Struct(seed, periodicNetworkScansNetworkScanOne, periodicNetworkScansNetworkScanDBTypes, false, periodicNetworkScansNetworkScanColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PeriodicNetworkScansNetworkScan struct: %s", err)
	}
	if err = randomize.Struct(seed, periodicNetworkScansNetworkScanTwo, periodicNetworkScansNetworkScanDBTypes, false, periodicNetworkScansNetworkScanColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PeriodicNetworkScansNetworkScan struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = periodicNetworkScansNetworkScanOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = periodicNetworkScansNetworkScanTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PeriodicNetworkScansNetworkScans().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func periodicNetworkScansNetworkScanBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *PeriodicNetworkScansNetworkScan) error {
	*o = PeriodicNetworkScansNetworkScan{}
	return nil
}

func periodicNetworkScansNetworkScanAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *PeriodicNetworkScansNetworkScan) error {
	*o = PeriodicNetworkScansNetworkScan{}
	return nil
}

func periodicNetworkScansNetworkScanAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *PeriodicNetworkScansNetworkScan) error {
	*o = PeriodicNetworkScansNetworkScan{}
	return nil
}

func periodicNetworkScansNetworkScanBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *PeriodicNetworkScansNetworkScan) error {
	*o = PeriodicNetworkScansNetworkScan{}
	return nil
}

func periodicNetworkScansNetworkScanAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *PeriodicNetworkScansNetworkScan) error {
	*o = PeriodicNetworkScansNetworkScan{}
	return nil
}

func periodicNetworkScansNetworkScanBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *PeriodicNetworkScansNetworkScan) error {
	*o = PeriodicNetworkScansNetworkScan{}
	return nil
}

func periodicNetworkScansNetworkScanAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *PeriodicNetworkScansNetworkScan) error {
	*o = PeriodicNetworkScansNetworkScan{}
	return nil
}

func periodicNetworkScansNetworkScanBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *PeriodicNetworkScansNetworkScan) error {
	*o = PeriodicNetworkScansNetworkScan{}
	return nil
}

func periodicNetworkScansNetworkScanAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *PeriodicNetworkScansNetworkScan) error {
	*o = PeriodicNetworkScansNetworkScan{}
	return nil
}

func testPeriodicNetworkScansNetworkScansHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &PeriodicNetworkScansNetworkScan{}
	o := &PeriodicNetworkScansNetworkScan{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, periodicNetworkScansNetworkScanDBTypes, false); err != nil {
		t.Errorf("Unable to randomize PeriodicNetworkScansNetworkScan object: %s", err)
	}

	AddPeriodicNetworkScansNetworkScanHook(boil.BeforeInsertHook, periodicNetworkScansNetworkScanBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	periodicNetworkScansNetworkScanBeforeInsertHooks = []PeriodicNetworkScansNetworkScanHook{}

	AddPeriodicNetworkScansNetworkScanHook(boil.AfterInsertHook, periodicNetworkScansNetworkScanAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	periodicNetworkScansNetworkScanAfterInsertHooks = []PeriodicNetworkScansNetworkScanHook{}

	AddPeriodicNetworkScansNetworkScanHook(boil.AfterSelectHook, periodicNetworkScansNetworkScanAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	periodicNetworkScansNetworkScanAfterSelectHooks = []PeriodicNetworkScansNetworkScanHook{}

	AddPeriodicNetworkScansNetworkScanHook(boil.BeforeUpdateHook, periodicNetworkScansNetworkScanBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	periodicNetworkScansNetworkScanBeforeUpdateHooks = []PeriodicNetworkScansNetworkScanHook{}

	AddPeriodicNetworkScansNetworkScanHook(boil.AfterUpdateHook, periodicNetworkScansNetworkScanAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	periodicNetworkScansNetworkScanAfterUpdateHooks = []PeriodicNetworkScansNetworkScanHook{}

	AddPeriodicNetworkScansNetworkScanHook(boil.BeforeDeleteHook, periodicNetworkScansNetworkScanBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	periodicNetworkScansNetworkScanBeforeDeleteHooks = []PeriodicNetworkScansNetworkScanHook{}

	AddPeriodicNetworkScansNetworkScanHook(boil.AfterDeleteHook, periodicNetworkScansNetworkScanAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	periodicNetworkScansNetworkScanAfterDeleteHooks = []PeriodicNetworkScansNetworkScanHook{}

	AddPeriodicNetworkScansNetworkScanHook(boil.BeforeUpsertHook, periodicNetworkScansNetworkScanBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	periodicNetworkScansNetworkScanBeforeUpsertHooks = []PeriodicNetworkScansNetworkScanHook{}

	AddPeriodicNetworkScansNetworkScanHook(boil.AfterUpsertHook, periodicNetworkScansNetworkScanAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	periodicNetworkScansNetworkScanAfterUpsertHooks = []PeriodicNetworkScansNetworkScanHook{}
}

func testPeriodicNetworkScansNetworkScansInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PeriodicNetworkScansNetworkScan{}
	if err = randomize.Struct(seed, o, periodicNetworkScansNetworkScanDBTypes, true, periodicNetworkScansNetworkScanColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PeriodicNetworkScansNetworkScan struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PeriodicNetworkScansNetworkScans().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPeriodicNetworkScansNetworkScansInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PeriodicNetworkScansNetworkScan{}
	if err = randomize.Struct(seed, o, periodicNetworkScansNetworkScanDBTypes, true); err != nil {
		t.Errorf("Unable to randomize PeriodicNetworkScansNetworkScan struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(periodicNetworkScansNetworkScanColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := PeriodicNetworkScansNetworkScans().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPeriodicNetworkScansNetworkScansReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PeriodicNetworkScansNetworkScan{}
	if err = randomize.Struct(seed, o, periodicNetworkScansNetworkScanDBTypes, true, periodicNetworkScansNetworkScanColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PeriodicNetworkScansNetworkScan struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testPeriodicNetworkScansNetworkScansReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PeriodicNetworkScansNetworkScan{}
	if err = randomize.Struct(seed, o, periodicNetworkScansNetworkScanDBTypes, true, periodicNetworkScansNetworkScanColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PeriodicNetworkScansNetworkScan struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := PeriodicNetworkScansNetworkScanSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testPeriodicNetworkScansNetworkScansSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PeriodicNetworkScansNetworkScan{}
	if err = randomize.Struct(seed, o, periodicNetworkScansNetworkScanDBTypes, true, periodicNetworkScansNetworkScanColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PeriodicNetworkScansNetworkScan struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := PeriodicNetworkScansNetworkScans().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	periodicNetworkScansNetworkScanDBTypes = map[string]string{`ID`: `INTEGER`, `CreatedAt`: `DATE`, `NodeScanID`: `INTEGER`}
	_                                      = bytes.MinRead
)

func testPeriodicNetworkScansNetworkScansUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(periodicNetworkScansNetworkScanPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(periodicNetworkScansNetworkScanAllColumns) == len(periodicNetworkScansNetworkScanPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &PeriodicNetworkScansNetworkScan{}
	if err = randomize.Struct(seed, o, periodicNetworkScansNetworkScanDBTypes, true, periodicNetworkScansNetworkScanColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PeriodicNetworkScansNetworkScan struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PeriodicNetworkScansNetworkScans().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, periodicNetworkScansNetworkScanDBTypes, true, periodicNetworkScansNetworkScanPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize PeriodicNetworkScansNetworkScan struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testPeriodicNetworkScansNetworkScansSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(periodicNetworkScansNetworkScanAllColumns) == len(periodicNetworkScansNetworkScanPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &PeriodicNetworkScansNetworkScan{}
	if err = randomize.Struct(seed, o, periodicNetworkScansNetworkScanDBTypes, true, periodicNetworkScansNetworkScanColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PeriodicNetworkScansNetworkScan struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PeriodicNetworkScansNetworkScans().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, periodicNetworkScansNetworkScanDBTypes, true, periodicNetworkScansNetworkScanPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize PeriodicNetworkScansNetworkScan struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(periodicNetworkScansNetworkScanAllColumns, periodicNetworkScansNetworkScanPrimaryKeyColumns) {
		fields = periodicNetworkScansNetworkScanAllColumns
	} else {
		fields = strmangle.SetComplement(
			periodicNetworkScansNetworkScanAllColumns,
			periodicNetworkScansNetworkScanPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := PeriodicNetworkScansNetworkScanSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}
