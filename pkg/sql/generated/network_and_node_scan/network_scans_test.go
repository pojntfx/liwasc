// Code generated by SQLBoiler 3.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testNetworkScans(t *testing.T) {
	t.Parallel()

	query := NetworkScans()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testNetworkScansDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NetworkScan{}
	if err = randomize.Struct(seed, o, networkScanDBTypes, true, networkScanColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NetworkScan struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := NetworkScans().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testNetworkScansQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NetworkScan{}
	if err = randomize.Struct(seed, o, networkScanDBTypes, true, networkScanColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NetworkScan struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := NetworkScans().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := NetworkScans().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testNetworkScansSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NetworkScan{}
	if err = randomize.Struct(seed, o, networkScanDBTypes, true, networkScanColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NetworkScan struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := NetworkScanSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := NetworkScans().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testNetworkScansExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NetworkScan{}
	if err = randomize.Struct(seed, o, networkScanDBTypes, true, networkScanColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NetworkScan struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := NetworkScanExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if NetworkScan exists: %s", err)
	}
	if !e {
		t.Errorf("Expected NetworkScanExists to return true, but got false.")
	}
}

func testNetworkScansFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NetworkScan{}
	if err = randomize.Struct(seed, o, networkScanDBTypes, true, networkScanColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NetworkScan struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	networkScanFound, err := FindNetworkScan(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if networkScanFound == nil {
		t.Error("want a record, got nil")
	}
}

func testNetworkScansBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NetworkScan{}
	if err = randomize.Struct(seed, o, networkScanDBTypes, true, networkScanColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NetworkScan struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = NetworkScans().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testNetworkScansOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NetworkScan{}
	if err = randomize.Struct(seed, o, networkScanDBTypes, true, networkScanColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NetworkScan struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := NetworkScans().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testNetworkScansAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	networkScanOne := &NetworkScan{}
	networkScanTwo := &NetworkScan{}
	if err = randomize.Struct(seed, networkScanOne, networkScanDBTypes, false, networkScanColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NetworkScan struct: %s", err)
	}
	if err = randomize.Struct(seed, networkScanTwo, networkScanDBTypes, false, networkScanColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NetworkScan struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = networkScanOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = networkScanTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := NetworkScans().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testNetworkScansCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	networkScanOne := &NetworkScan{}
	networkScanTwo := &NetworkScan{}
	if err = randomize.Struct(seed, networkScanOne, networkScanDBTypes, false, networkScanColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NetworkScan struct: %s", err)
	}
	if err = randomize.Struct(seed, networkScanTwo, networkScanDBTypes, false, networkScanColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NetworkScan struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = networkScanOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = networkScanTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := NetworkScans().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func networkScanBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *NetworkScan) error {
	*o = NetworkScan{}
	return nil
}

func networkScanAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *NetworkScan) error {
	*o = NetworkScan{}
	return nil
}

func networkScanAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *NetworkScan) error {
	*o = NetworkScan{}
	return nil
}

func networkScanBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *NetworkScan) error {
	*o = NetworkScan{}
	return nil
}

func networkScanAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *NetworkScan) error {
	*o = NetworkScan{}
	return nil
}

func networkScanBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *NetworkScan) error {
	*o = NetworkScan{}
	return nil
}

func networkScanAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *NetworkScan) error {
	*o = NetworkScan{}
	return nil
}

func networkScanBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *NetworkScan) error {
	*o = NetworkScan{}
	return nil
}

func networkScanAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *NetworkScan) error {
	*o = NetworkScan{}
	return nil
}

func testNetworkScansHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &NetworkScan{}
	o := &NetworkScan{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, networkScanDBTypes, false); err != nil {
		t.Errorf("Unable to randomize NetworkScan object: %s", err)
	}

	AddNetworkScanHook(boil.BeforeInsertHook, networkScanBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	networkScanBeforeInsertHooks = []NetworkScanHook{}

	AddNetworkScanHook(boil.AfterInsertHook, networkScanAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	networkScanAfterInsertHooks = []NetworkScanHook{}

	AddNetworkScanHook(boil.AfterSelectHook, networkScanAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	networkScanAfterSelectHooks = []NetworkScanHook{}

	AddNetworkScanHook(boil.BeforeUpdateHook, networkScanBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	networkScanBeforeUpdateHooks = []NetworkScanHook{}

	AddNetworkScanHook(boil.AfterUpdateHook, networkScanAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	networkScanAfterUpdateHooks = []NetworkScanHook{}

	AddNetworkScanHook(boil.BeforeDeleteHook, networkScanBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	networkScanBeforeDeleteHooks = []NetworkScanHook{}

	AddNetworkScanHook(boil.AfterDeleteHook, networkScanAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	networkScanAfterDeleteHooks = []NetworkScanHook{}

	AddNetworkScanHook(boil.BeforeUpsertHook, networkScanBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	networkScanBeforeUpsertHooks = []NetworkScanHook{}

	AddNetworkScanHook(boil.AfterUpsertHook, networkScanAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	networkScanAfterUpsertHooks = []NetworkScanHook{}
}

func testNetworkScansInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NetworkScan{}
	if err = randomize.Struct(seed, o, networkScanDBTypes, true, networkScanColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NetworkScan struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := NetworkScans().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testNetworkScansInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NetworkScan{}
	if err = randomize.Struct(seed, o, networkScanDBTypes, true); err != nil {
		t.Errorf("Unable to randomize NetworkScan struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(networkScanColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := NetworkScans().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testNetworkScansReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NetworkScan{}
	if err = randomize.Struct(seed, o, networkScanDBTypes, true, networkScanColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NetworkScan struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testNetworkScansReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NetworkScan{}
	if err = randomize.Struct(seed, o, networkScanDBTypes, true, networkScanColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NetworkScan struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := NetworkScanSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testNetworkScansSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NetworkScan{}
	if err = randomize.Struct(seed, o, networkScanDBTypes, true, networkScanColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NetworkScan struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := NetworkScans().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	networkScanDBTypes = map[string]string{`ID`: `INTEGER`, `CreatedAt`: `DATE`, `Done`: `INTEGER`}
	_                  = bytes.MinRead
)

func testNetworkScansUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(networkScanPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(networkScanAllColumns) == len(networkScanPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &NetworkScan{}
	if err = randomize.Struct(seed, o, networkScanDBTypes, true, networkScanColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NetworkScan struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := NetworkScans().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, networkScanDBTypes, true, networkScanPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize NetworkScan struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testNetworkScansSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(networkScanAllColumns) == len(networkScanPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &NetworkScan{}
	if err = randomize.Struct(seed, o, networkScanDBTypes, true, networkScanColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NetworkScan struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := NetworkScans().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, networkScanDBTypes, true, networkScanPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize NetworkScan struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(networkScanAllColumns, networkScanPrimaryKeyColumns) {
		fields = networkScanAllColumns
	} else {
		fields = strmangle.SetComplement(
			networkScanAllColumns,
			networkScanPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := NetworkScanSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}
