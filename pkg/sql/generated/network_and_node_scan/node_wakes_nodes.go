// Code generated by SQLBoiler 3.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// NodeWakesNode is an object representing the database table.
type NodeWakesNode struct {
	ID          int64     `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreatedAt   time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	NodeID      string    `boil:"node_id" json:"node_id" toml:"node_id" yaml:"node_id"`
	NodeWakesID int64     `boil:"node_wakes_id" json:"node_wakes_id" toml:"node_wakes_id" yaml:"node_wakes_id"`

	R *nodeWakesNodeR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L nodeWakesNodeL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var NodeWakesNodeColumns = struct {
	ID          string
	CreatedAt   string
	NodeID      string
	NodeWakesID string
}{
	ID:          "id",
	CreatedAt:   "created_at",
	NodeID:      "node_id",
	NodeWakesID: "node_wakes_id",
}

// Generated where

var NodeWakesNodeWhere = struct {
	ID          whereHelperint64
	CreatedAt   whereHelpertime_Time
	NodeID      whereHelperstring
	NodeWakesID whereHelperint64
}{
	ID:          whereHelperint64{field: "\"node_wakes_nodes\".\"id\""},
	CreatedAt:   whereHelpertime_Time{field: "\"node_wakes_nodes\".\"created_at\""},
	NodeID:      whereHelperstring{field: "\"node_wakes_nodes\".\"node_id\""},
	NodeWakesID: whereHelperint64{field: "\"node_wakes_nodes\".\"node_wakes_id\""},
}

// NodeWakesNodeRels is where relationship names are stored.
var NodeWakesNodeRels = struct {
}{}

// nodeWakesNodeR is where relationships are stored.
type nodeWakesNodeR struct {
}

// NewStruct creates a new relationship struct
func (*nodeWakesNodeR) NewStruct() *nodeWakesNodeR {
	return &nodeWakesNodeR{}
}

// nodeWakesNodeL is where Load methods for each relationship are stored.
type nodeWakesNodeL struct{}

var (
	nodeWakesNodeAllColumns            = []string{"id", "created_at", "node_id", "node_wakes_id"}
	nodeWakesNodeColumnsWithoutDefault = []string{"created_at", "node_id", "node_wakes_id"}
	nodeWakesNodeColumnsWithDefault    = []string{"id"}
	nodeWakesNodePrimaryKeyColumns     = []string{"id"}
)

type (
	// NodeWakesNodeSlice is an alias for a slice of pointers to NodeWakesNode.
	// This should generally be used opposed to []NodeWakesNode.
	NodeWakesNodeSlice []*NodeWakesNode
	// NodeWakesNodeHook is the signature for custom NodeWakesNode hook methods
	NodeWakesNodeHook func(context.Context, boil.ContextExecutor, *NodeWakesNode) error

	nodeWakesNodeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	nodeWakesNodeType                 = reflect.TypeOf(&NodeWakesNode{})
	nodeWakesNodeMapping              = queries.MakeStructMapping(nodeWakesNodeType)
	nodeWakesNodePrimaryKeyMapping, _ = queries.BindMapping(nodeWakesNodeType, nodeWakesNodeMapping, nodeWakesNodePrimaryKeyColumns)
	nodeWakesNodeInsertCacheMut       sync.RWMutex
	nodeWakesNodeInsertCache          = make(map[string]insertCache)
	nodeWakesNodeUpdateCacheMut       sync.RWMutex
	nodeWakesNodeUpdateCache          = make(map[string]updateCache)
	nodeWakesNodeUpsertCacheMut       sync.RWMutex
	nodeWakesNodeUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var nodeWakesNodeBeforeInsertHooks []NodeWakesNodeHook
var nodeWakesNodeBeforeUpdateHooks []NodeWakesNodeHook
var nodeWakesNodeBeforeDeleteHooks []NodeWakesNodeHook
var nodeWakesNodeBeforeUpsertHooks []NodeWakesNodeHook

var nodeWakesNodeAfterInsertHooks []NodeWakesNodeHook
var nodeWakesNodeAfterSelectHooks []NodeWakesNodeHook
var nodeWakesNodeAfterUpdateHooks []NodeWakesNodeHook
var nodeWakesNodeAfterDeleteHooks []NodeWakesNodeHook
var nodeWakesNodeAfterUpsertHooks []NodeWakesNodeHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *NodeWakesNode) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range nodeWakesNodeBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *NodeWakesNode) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range nodeWakesNodeBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *NodeWakesNode) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range nodeWakesNodeBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *NodeWakesNode) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range nodeWakesNodeBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *NodeWakesNode) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range nodeWakesNodeAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *NodeWakesNode) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range nodeWakesNodeAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *NodeWakesNode) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range nodeWakesNodeAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *NodeWakesNode) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range nodeWakesNodeAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *NodeWakesNode) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range nodeWakesNodeAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddNodeWakesNodeHook registers your hook function for all future operations.
func AddNodeWakesNodeHook(hookPoint boil.HookPoint, nodeWakesNodeHook NodeWakesNodeHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		nodeWakesNodeBeforeInsertHooks = append(nodeWakesNodeBeforeInsertHooks, nodeWakesNodeHook)
	case boil.BeforeUpdateHook:
		nodeWakesNodeBeforeUpdateHooks = append(nodeWakesNodeBeforeUpdateHooks, nodeWakesNodeHook)
	case boil.BeforeDeleteHook:
		nodeWakesNodeBeforeDeleteHooks = append(nodeWakesNodeBeforeDeleteHooks, nodeWakesNodeHook)
	case boil.BeforeUpsertHook:
		nodeWakesNodeBeforeUpsertHooks = append(nodeWakesNodeBeforeUpsertHooks, nodeWakesNodeHook)
	case boil.AfterInsertHook:
		nodeWakesNodeAfterInsertHooks = append(nodeWakesNodeAfterInsertHooks, nodeWakesNodeHook)
	case boil.AfterSelectHook:
		nodeWakesNodeAfterSelectHooks = append(nodeWakesNodeAfterSelectHooks, nodeWakesNodeHook)
	case boil.AfterUpdateHook:
		nodeWakesNodeAfterUpdateHooks = append(nodeWakesNodeAfterUpdateHooks, nodeWakesNodeHook)
	case boil.AfterDeleteHook:
		nodeWakesNodeAfterDeleteHooks = append(nodeWakesNodeAfterDeleteHooks, nodeWakesNodeHook)
	case boil.AfterUpsertHook:
		nodeWakesNodeAfterUpsertHooks = append(nodeWakesNodeAfterUpsertHooks, nodeWakesNodeHook)
	}
}

// One returns a single nodeWakesNode record from the query.
func (q nodeWakesNodeQuery) One(ctx context.Context, exec boil.ContextExecutor) (*NodeWakesNode, error) {
	o := &NodeWakesNode{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for node_wakes_nodes")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all NodeWakesNode records from the query.
func (q nodeWakesNodeQuery) All(ctx context.Context, exec boil.ContextExecutor) (NodeWakesNodeSlice, error) {
	var o []*NodeWakesNode

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to NodeWakesNode slice")
	}

	if len(nodeWakesNodeAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all NodeWakesNode records in the query.
func (q nodeWakesNodeQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count node_wakes_nodes rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q nodeWakesNodeQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if node_wakes_nodes exists")
	}

	return count > 0, nil
}

// NodeWakesNodes retrieves all the records using an executor.
func NodeWakesNodes(mods ...qm.QueryMod) nodeWakesNodeQuery {
	mods = append(mods, qm.From("\"node_wakes_nodes\""))
	return nodeWakesNodeQuery{NewQuery(mods...)}
}

// FindNodeWakesNode retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindNodeWakesNode(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*NodeWakesNode, error) {
	nodeWakesNodeObj := &NodeWakesNode{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"node_wakes_nodes\" where \"id\"=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, nodeWakesNodeObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from node_wakes_nodes")
	}

	return nodeWakesNodeObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *NodeWakesNode) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no node_wakes_nodes provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(nodeWakesNodeColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	nodeWakesNodeInsertCacheMut.RLock()
	cache, cached := nodeWakesNodeInsertCache[key]
	nodeWakesNodeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			nodeWakesNodeAllColumns,
			nodeWakesNodeColumnsWithDefault,
			nodeWakesNodeColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(nodeWakesNodeType, nodeWakesNodeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(nodeWakesNodeType, nodeWakesNodeMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"node_wakes_nodes\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"node_wakes_nodes\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT \"%s\" FROM \"node_wakes_nodes\" WHERE %s", strings.Join(returnColumns, "\",\""), strmangle.WhereClause("\"", "\"", 0, nodeWakesNodePrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into node_wakes_nodes")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == nodeWakesNodeMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for node_wakes_nodes")
	}

CacheNoHooks:
	if !cached {
		nodeWakesNodeInsertCacheMut.Lock()
		nodeWakesNodeInsertCache[key] = cache
		nodeWakesNodeInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the NodeWakesNode.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *NodeWakesNode) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	nodeWakesNodeUpdateCacheMut.RLock()
	cache, cached := nodeWakesNodeUpdateCache[key]
	nodeWakesNodeUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			nodeWakesNodeAllColumns,
			nodeWakesNodePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update node_wakes_nodes, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"node_wakes_nodes\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, nodeWakesNodePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(nodeWakesNodeType, nodeWakesNodeMapping, append(wl, nodeWakesNodePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update node_wakes_nodes row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for node_wakes_nodes")
	}

	if !cached {
		nodeWakesNodeUpdateCacheMut.Lock()
		nodeWakesNodeUpdateCache[key] = cache
		nodeWakesNodeUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q nodeWakesNodeQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for node_wakes_nodes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for node_wakes_nodes")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o NodeWakesNodeSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), nodeWakesNodePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"node_wakes_nodes\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, nodeWakesNodePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in nodeWakesNode slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all nodeWakesNode")
	}
	return rowsAff, nil
}

// Delete deletes a single NodeWakesNode record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *NodeWakesNode) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no NodeWakesNode provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), nodeWakesNodePrimaryKeyMapping)
	sql := "DELETE FROM \"node_wakes_nodes\" WHERE \"id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from node_wakes_nodes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for node_wakes_nodes")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q nodeWakesNodeQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no nodeWakesNodeQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from node_wakes_nodes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for node_wakes_nodes")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o NodeWakesNodeSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(nodeWakesNodeBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), nodeWakesNodePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"node_wakes_nodes\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, nodeWakesNodePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from nodeWakesNode slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for node_wakes_nodes")
	}

	if len(nodeWakesNodeAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *NodeWakesNode) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindNodeWakesNode(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *NodeWakesNodeSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := NodeWakesNodeSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), nodeWakesNodePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"node_wakes_nodes\".* FROM \"node_wakes_nodes\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, nodeWakesNodePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in NodeWakesNodeSlice")
	}

	*o = slice

	return nil
}

// NodeWakesNodeExists checks if the NodeWakesNode row exists.
func NodeWakesNodeExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"node_wakes_nodes\" where \"id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if node_wakes_nodes exists")
	}

	return exists, nil
}
