// Code generated by SQLBoiler 3.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testNodeWakesNodes(t *testing.T) {
	t.Parallel()

	query := NodeWakesNodes()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testNodeWakesNodesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NodeWakesNode{}
	if err = randomize.Struct(seed, o, nodeWakesNodeDBTypes, true, nodeWakesNodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NodeWakesNode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := NodeWakesNodes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testNodeWakesNodesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NodeWakesNode{}
	if err = randomize.Struct(seed, o, nodeWakesNodeDBTypes, true, nodeWakesNodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NodeWakesNode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := NodeWakesNodes().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := NodeWakesNodes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testNodeWakesNodesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NodeWakesNode{}
	if err = randomize.Struct(seed, o, nodeWakesNodeDBTypes, true, nodeWakesNodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NodeWakesNode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := NodeWakesNodeSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := NodeWakesNodes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testNodeWakesNodesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NodeWakesNode{}
	if err = randomize.Struct(seed, o, nodeWakesNodeDBTypes, true, nodeWakesNodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NodeWakesNode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := NodeWakesNodeExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if NodeWakesNode exists: %s", err)
	}
	if !e {
		t.Errorf("Expected NodeWakesNodeExists to return true, but got false.")
	}
}

func testNodeWakesNodesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NodeWakesNode{}
	if err = randomize.Struct(seed, o, nodeWakesNodeDBTypes, true, nodeWakesNodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NodeWakesNode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	nodeWakesNodeFound, err := FindNodeWakesNode(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if nodeWakesNodeFound == nil {
		t.Error("want a record, got nil")
	}
}

func testNodeWakesNodesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NodeWakesNode{}
	if err = randomize.Struct(seed, o, nodeWakesNodeDBTypes, true, nodeWakesNodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NodeWakesNode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = NodeWakesNodes().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testNodeWakesNodesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NodeWakesNode{}
	if err = randomize.Struct(seed, o, nodeWakesNodeDBTypes, true, nodeWakesNodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NodeWakesNode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := NodeWakesNodes().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testNodeWakesNodesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	nodeWakesNodeOne := &NodeWakesNode{}
	nodeWakesNodeTwo := &NodeWakesNode{}
	if err = randomize.Struct(seed, nodeWakesNodeOne, nodeWakesNodeDBTypes, false, nodeWakesNodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NodeWakesNode struct: %s", err)
	}
	if err = randomize.Struct(seed, nodeWakesNodeTwo, nodeWakesNodeDBTypes, false, nodeWakesNodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NodeWakesNode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = nodeWakesNodeOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = nodeWakesNodeTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := NodeWakesNodes().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testNodeWakesNodesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	nodeWakesNodeOne := &NodeWakesNode{}
	nodeWakesNodeTwo := &NodeWakesNode{}
	if err = randomize.Struct(seed, nodeWakesNodeOne, nodeWakesNodeDBTypes, false, nodeWakesNodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NodeWakesNode struct: %s", err)
	}
	if err = randomize.Struct(seed, nodeWakesNodeTwo, nodeWakesNodeDBTypes, false, nodeWakesNodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NodeWakesNode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = nodeWakesNodeOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = nodeWakesNodeTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := NodeWakesNodes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func nodeWakesNodeBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *NodeWakesNode) error {
	*o = NodeWakesNode{}
	return nil
}

func nodeWakesNodeAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *NodeWakesNode) error {
	*o = NodeWakesNode{}
	return nil
}

func nodeWakesNodeAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *NodeWakesNode) error {
	*o = NodeWakesNode{}
	return nil
}

func nodeWakesNodeBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *NodeWakesNode) error {
	*o = NodeWakesNode{}
	return nil
}

func nodeWakesNodeAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *NodeWakesNode) error {
	*o = NodeWakesNode{}
	return nil
}

func nodeWakesNodeBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *NodeWakesNode) error {
	*o = NodeWakesNode{}
	return nil
}

func nodeWakesNodeAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *NodeWakesNode) error {
	*o = NodeWakesNode{}
	return nil
}

func nodeWakesNodeBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *NodeWakesNode) error {
	*o = NodeWakesNode{}
	return nil
}

func nodeWakesNodeAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *NodeWakesNode) error {
	*o = NodeWakesNode{}
	return nil
}

func testNodeWakesNodesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &NodeWakesNode{}
	o := &NodeWakesNode{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, nodeWakesNodeDBTypes, false); err != nil {
		t.Errorf("Unable to randomize NodeWakesNode object: %s", err)
	}

	AddNodeWakesNodeHook(boil.BeforeInsertHook, nodeWakesNodeBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	nodeWakesNodeBeforeInsertHooks = []NodeWakesNodeHook{}

	AddNodeWakesNodeHook(boil.AfterInsertHook, nodeWakesNodeAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	nodeWakesNodeAfterInsertHooks = []NodeWakesNodeHook{}

	AddNodeWakesNodeHook(boil.AfterSelectHook, nodeWakesNodeAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	nodeWakesNodeAfterSelectHooks = []NodeWakesNodeHook{}

	AddNodeWakesNodeHook(boil.BeforeUpdateHook, nodeWakesNodeBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	nodeWakesNodeBeforeUpdateHooks = []NodeWakesNodeHook{}

	AddNodeWakesNodeHook(boil.AfterUpdateHook, nodeWakesNodeAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	nodeWakesNodeAfterUpdateHooks = []NodeWakesNodeHook{}

	AddNodeWakesNodeHook(boil.BeforeDeleteHook, nodeWakesNodeBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	nodeWakesNodeBeforeDeleteHooks = []NodeWakesNodeHook{}

	AddNodeWakesNodeHook(boil.AfterDeleteHook, nodeWakesNodeAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	nodeWakesNodeAfterDeleteHooks = []NodeWakesNodeHook{}

	AddNodeWakesNodeHook(boil.BeforeUpsertHook, nodeWakesNodeBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	nodeWakesNodeBeforeUpsertHooks = []NodeWakesNodeHook{}

	AddNodeWakesNodeHook(boil.AfterUpsertHook, nodeWakesNodeAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	nodeWakesNodeAfterUpsertHooks = []NodeWakesNodeHook{}
}

func testNodeWakesNodesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NodeWakesNode{}
	if err = randomize.Struct(seed, o, nodeWakesNodeDBTypes, true, nodeWakesNodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NodeWakesNode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := NodeWakesNodes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testNodeWakesNodesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NodeWakesNode{}
	if err = randomize.Struct(seed, o, nodeWakesNodeDBTypes, true); err != nil {
		t.Errorf("Unable to randomize NodeWakesNode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(nodeWakesNodeColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := NodeWakesNodes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testNodeWakesNodesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NodeWakesNode{}
	if err = randomize.Struct(seed, o, nodeWakesNodeDBTypes, true, nodeWakesNodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NodeWakesNode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testNodeWakesNodesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NodeWakesNode{}
	if err = randomize.Struct(seed, o, nodeWakesNodeDBTypes, true, nodeWakesNodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NodeWakesNode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := NodeWakesNodeSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testNodeWakesNodesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NodeWakesNode{}
	if err = randomize.Struct(seed, o, nodeWakesNodeDBTypes, true, nodeWakesNodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NodeWakesNode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := NodeWakesNodes().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	nodeWakesNodeDBTypes = map[string]string{`ID`: `INTEGER`, `CreatedAt`: `DATE`, `NodeID`: `TEXT`, `NodeWakesID`: `INTEGER`}
	_                    = bytes.MinRead
)

func testNodeWakesNodesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(nodeWakesNodePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(nodeWakesNodeAllColumns) == len(nodeWakesNodePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &NodeWakesNode{}
	if err = randomize.Struct(seed, o, nodeWakesNodeDBTypes, true, nodeWakesNodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NodeWakesNode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := NodeWakesNodes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, nodeWakesNodeDBTypes, true, nodeWakesNodePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize NodeWakesNode struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testNodeWakesNodesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(nodeWakesNodeAllColumns) == len(nodeWakesNodePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &NodeWakesNode{}
	if err = randomize.Struct(seed, o, nodeWakesNodeDBTypes, true, nodeWakesNodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NodeWakesNode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := NodeWakesNodes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, nodeWakesNodeDBTypes, true, nodeWakesNodePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize NodeWakesNode struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(nodeWakesNodeAllColumns, nodeWakesNodePrimaryKeyColumns) {
		fields = nodeWakesNodeAllColumns
	} else {
		fields = strmangle.SetComplement(
			nodeWakesNodeAllColumns,
			nodeWakesNodePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := NodeWakesNodeSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}
