// Code generated by SQLBoiler 3.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Node is an object representing the database table.
type Node struct {
	ID            int64     `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreatedAt     time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	MacAddress    string    `boil:"mac_address" json:"mac_address" toml:"mac_address" yaml:"mac_address"`
	NetworkScanID int64     `boil:"network_scan_id" json:"network_scan_id" toml:"network_scan_id" yaml:"network_scan_id"`

	R *nodeR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L nodeL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var NodeColumns = struct {
	ID            string
	CreatedAt     string
	MacAddress    string
	NetworkScanID string
}{
	ID:            "id",
	CreatedAt:     "created_at",
	MacAddress:    "mac_address",
	NetworkScanID: "network_scan_id",
}

// Generated where

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}

var NodeWhere = struct {
	ID            whereHelperint64
	CreatedAt     whereHelpertime_Time
	MacAddress    whereHelperstring
	NetworkScanID whereHelperint64
}{
	ID:            whereHelperint64{field: "\"nodes\".\"id\""},
	CreatedAt:     whereHelpertime_Time{field: "\"nodes\".\"created_at\""},
	MacAddress:    whereHelperstring{field: "\"nodes\".\"mac_address\""},
	NetworkScanID: whereHelperint64{field: "\"nodes\".\"network_scan_id\""},
}

// NodeRels is where relationship names are stored.
var NodeRels = struct {
	NetworkScan string
	NodeScans   string
}{
	NetworkScan: "NetworkScan",
	NodeScans:   "NodeScans",
}

// nodeR is where relationships are stored.
type nodeR struct {
	NetworkScan *NetworkScan
	NodeScans   NodeScanSlice
}

// NewStruct creates a new relationship struct
func (*nodeR) NewStruct() *nodeR {
	return &nodeR{}
}

// nodeL is where Load methods for each relationship are stored.
type nodeL struct{}

var (
	nodeAllColumns            = []string{"id", "created_at", "mac_address", "network_scan_id"}
	nodeColumnsWithoutDefault = []string{"created_at", "mac_address", "network_scan_id"}
	nodeColumnsWithDefault    = []string{"id"}
	nodePrimaryKeyColumns     = []string{"id"}
)

type (
	// NodeSlice is an alias for a slice of pointers to Node.
	// This should generally be used opposed to []Node.
	NodeSlice []*Node
	// NodeHook is the signature for custom Node hook methods
	NodeHook func(context.Context, boil.ContextExecutor, *Node) error

	nodeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	nodeType                 = reflect.TypeOf(&Node{})
	nodeMapping              = queries.MakeStructMapping(nodeType)
	nodePrimaryKeyMapping, _ = queries.BindMapping(nodeType, nodeMapping, nodePrimaryKeyColumns)
	nodeInsertCacheMut       sync.RWMutex
	nodeInsertCache          = make(map[string]insertCache)
	nodeUpdateCacheMut       sync.RWMutex
	nodeUpdateCache          = make(map[string]updateCache)
	nodeUpsertCacheMut       sync.RWMutex
	nodeUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var nodeBeforeInsertHooks []NodeHook
var nodeBeforeUpdateHooks []NodeHook
var nodeBeforeDeleteHooks []NodeHook
var nodeBeforeUpsertHooks []NodeHook

var nodeAfterInsertHooks []NodeHook
var nodeAfterSelectHooks []NodeHook
var nodeAfterUpdateHooks []NodeHook
var nodeAfterDeleteHooks []NodeHook
var nodeAfterUpsertHooks []NodeHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Node) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range nodeBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Node) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range nodeBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Node) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range nodeBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Node) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range nodeBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Node) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range nodeAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Node) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range nodeAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Node) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range nodeAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Node) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range nodeAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Node) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range nodeAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddNodeHook registers your hook function for all future operations.
func AddNodeHook(hookPoint boil.HookPoint, nodeHook NodeHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		nodeBeforeInsertHooks = append(nodeBeforeInsertHooks, nodeHook)
	case boil.BeforeUpdateHook:
		nodeBeforeUpdateHooks = append(nodeBeforeUpdateHooks, nodeHook)
	case boil.BeforeDeleteHook:
		nodeBeforeDeleteHooks = append(nodeBeforeDeleteHooks, nodeHook)
	case boil.BeforeUpsertHook:
		nodeBeforeUpsertHooks = append(nodeBeforeUpsertHooks, nodeHook)
	case boil.AfterInsertHook:
		nodeAfterInsertHooks = append(nodeAfterInsertHooks, nodeHook)
	case boil.AfterSelectHook:
		nodeAfterSelectHooks = append(nodeAfterSelectHooks, nodeHook)
	case boil.AfterUpdateHook:
		nodeAfterUpdateHooks = append(nodeAfterUpdateHooks, nodeHook)
	case boil.AfterDeleteHook:
		nodeAfterDeleteHooks = append(nodeAfterDeleteHooks, nodeHook)
	case boil.AfterUpsertHook:
		nodeAfterUpsertHooks = append(nodeAfterUpsertHooks, nodeHook)
	}
}

// One returns a single node record from the query.
func (q nodeQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Node, error) {
	o := &Node{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for nodes")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Node records from the query.
func (q nodeQuery) All(ctx context.Context, exec boil.ContextExecutor) (NodeSlice, error) {
	var o []*Node

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Node slice")
	}

	if len(nodeAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Node records in the query.
func (q nodeQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count nodes rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q nodeQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if nodes exists")
	}

	return count > 0, nil
}

// NetworkScan pointed to by the foreign key.
func (o *Node) NetworkScan(mods ...qm.QueryMod) networkScanQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.NetworkScanID),
	}

	queryMods = append(queryMods, mods...)

	query := NetworkScans(queryMods...)
	queries.SetFrom(query.Query, "\"network_scans\"")

	return query
}

// NodeScans retrieves all the node_scan's NodeScans with an executor.
func (o *Node) NodeScans(mods ...qm.QueryMod) nodeScanQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"node_scans\".\"node_id\"=?", o.ID),
	)

	query := NodeScans(queryMods...)
	queries.SetFrom(query.Query, "\"node_scans\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"node_scans\".*"})
	}

	return query
}

// LoadNetworkScan allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (nodeL) LoadNetworkScan(ctx context.Context, e boil.ContextExecutor, singular bool, maybeNode interface{}, mods queries.Applicator) error {
	var slice []*Node
	var object *Node

	if singular {
		object = maybeNode.(*Node)
	} else {
		slice = *maybeNode.(*[]*Node)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &nodeR{}
		}
		args = append(args, object.NetworkScanID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &nodeR{}
			}

			for _, a := range args {
				if a == obj.NetworkScanID {
					continue Outer
				}
			}

			args = append(args, obj.NetworkScanID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`network_scans`), qm.WhereIn(`network_scans.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load NetworkScan")
	}

	var resultSlice []*NetworkScan
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice NetworkScan")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for network_scans")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for network_scans")
	}

	if len(nodeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.NetworkScan = foreign
		if foreign.R == nil {
			foreign.R = &networkScanR{}
		}
		foreign.R.Nodes = append(foreign.R.Nodes, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.NetworkScanID == foreign.ID {
				local.R.NetworkScan = foreign
				if foreign.R == nil {
					foreign.R = &networkScanR{}
				}
				foreign.R.Nodes = append(foreign.R.Nodes, local)
				break
			}
		}
	}

	return nil
}

// LoadNodeScans allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (nodeL) LoadNodeScans(ctx context.Context, e boil.ContextExecutor, singular bool, maybeNode interface{}, mods queries.Applicator) error {
	var slice []*Node
	var object *Node

	if singular {
		object = maybeNode.(*Node)
	} else {
		slice = *maybeNode.(*[]*Node)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &nodeR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &nodeR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`node_scans`), qm.WhereIn(`node_scans.node_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load node_scans")
	}

	var resultSlice []*NodeScan
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice node_scans")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on node_scans")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for node_scans")
	}

	if len(nodeScanAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.NodeScans = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &nodeScanR{}
			}
			foreign.R.Node = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.NodeID {
				local.R.NodeScans = append(local.R.NodeScans, foreign)
				if foreign.R == nil {
					foreign.R = &nodeScanR{}
				}
				foreign.R.Node = local
				break
			}
		}
	}

	return nil
}

// SetNetworkScan of the node to the related item.
// Sets o.R.NetworkScan to related.
// Adds o to related.R.Nodes.
func (o *Node) SetNetworkScan(ctx context.Context, exec boil.ContextExecutor, insert bool, related *NetworkScan) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"nodes\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"network_scan_id"}),
		strmangle.WhereClause("\"", "\"", 0, nodePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.NetworkScanID = related.ID
	if o.R == nil {
		o.R = &nodeR{
			NetworkScan: related,
		}
	} else {
		o.R.NetworkScan = related
	}

	if related.R == nil {
		related.R = &networkScanR{
			Nodes: NodeSlice{o},
		}
	} else {
		related.R.Nodes = append(related.R.Nodes, o)
	}

	return nil
}

// AddNodeScans adds the given related objects to the existing relationships
// of the node, optionally inserting them as new records.
// Appends related to o.R.NodeScans.
// Sets related.R.Node appropriately.
func (o *Node) AddNodeScans(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*NodeScan) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.NodeID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"node_scans\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 0, []string{"node_id"}),
				strmangle.WhereClause("\"", "\"", 0, nodeScanPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.NodeID = o.ID
		}
	}

	if o.R == nil {
		o.R = &nodeR{
			NodeScans: related,
		}
	} else {
		o.R.NodeScans = append(o.R.NodeScans, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &nodeScanR{
				Node: o,
			}
		} else {
			rel.R.Node = o
		}
	}
	return nil
}

// Nodes retrieves all the records using an executor.
func Nodes(mods ...qm.QueryMod) nodeQuery {
	mods = append(mods, qm.From("\"nodes\""))
	return nodeQuery{NewQuery(mods...)}
}

// FindNode retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindNode(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*Node, error) {
	nodeObj := &Node{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"nodes\" where \"id\"=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, nodeObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from nodes")
	}

	return nodeObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Node) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no nodes provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(nodeColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	nodeInsertCacheMut.RLock()
	cache, cached := nodeInsertCache[key]
	nodeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			nodeAllColumns,
			nodeColumnsWithDefault,
			nodeColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(nodeType, nodeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(nodeType, nodeMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"nodes\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"nodes\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT \"%s\" FROM \"nodes\" WHERE %s", strings.Join(returnColumns, "\",\""), strmangle.WhereClause("\"", "\"", 0, nodePrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into nodes")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == nodeMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for nodes")
	}

CacheNoHooks:
	if !cached {
		nodeInsertCacheMut.Lock()
		nodeInsertCache[key] = cache
		nodeInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Node.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Node) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	nodeUpdateCacheMut.RLock()
	cache, cached := nodeUpdateCache[key]
	nodeUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			nodeAllColumns,
			nodePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update nodes, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"nodes\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, nodePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(nodeType, nodeMapping, append(wl, nodePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update nodes row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for nodes")
	}

	if !cached {
		nodeUpdateCacheMut.Lock()
		nodeUpdateCache[key] = cache
		nodeUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q nodeQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for nodes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for nodes")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o NodeSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), nodePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"nodes\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, nodePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in node slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all node")
	}
	return rowsAff, nil
}

// Delete deletes a single Node record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Node) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Node provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), nodePrimaryKeyMapping)
	sql := "DELETE FROM \"nodes\" WHERE \"id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from nodes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for nodes")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q nodeQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no nodeQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from nodes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for nodes")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o NodeSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(nodeBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), nodePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"nodes\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, nodePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from node slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for nodes")
	}

	if len(nodeAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Node) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindNode(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *NodeSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := NodeSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), nodePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"nodes\".* FROM \"nodes\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, nodePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in NodeSlice")
	}

	*o = slice

	return nil
}

// NodeExists checks if the Node row exists.
func NodeExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"nodes\" where \"id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if nodes exists")
	}

	return exists, nil
}
