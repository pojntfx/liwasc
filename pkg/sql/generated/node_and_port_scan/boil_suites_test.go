// Code generated by SQLBoiler 3.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("NodeScans", testNodeScans)
	t.Run("Nodes", testNodes)
	t.Run("PortScans", testPortScans)
	t.Run("Ports", testPorts)
}

func TestDelete(t *testing.T) {
	t.Run("NodeScans", testNodeScansDelete)
	t.Run("Nodes", testNodesDelete)
	t.Run("PortScans", testPortScansDelete)
	t.Run("Ports", testPortsDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("NodeScans", testNodeScansQueryDeleteAll)
	t.Run("Nodes", testNodesQueryDeleteAll)
	t.Run("PortScans", testPortScansQueryDeleteAll)
	t.Run("Ports", testPortsQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("NodeScans", testNodeScansSliceDeleteAll)
	t.Run("Nodes", testNodesSliceDeleteAll)
	t.Run("PortScans", testPortScansSliceDeleteAll)
	t.Run("Ports", testPortsSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("NodeScans", testNodeScansExists)
	t.Run("Nodes", testNodesExists)
	t.Run("PortScans", testPortScansExists)
	t.Run("Ports", testPortsExists)
}

func TestFind(t *testing.T) {
	t.Run("NodeScans", testNodeScansFind)
	t.Run("Nodes", testNodesFind)
	t.Run("PortScans", testPortScansFind)
	t.Run("Ports", testPortsFind)
}

func TestBind(t *testing.T) {
	t.Run("NodeScans", testNodeScansBind)
	t.Run("Nodes", testNodesBind)
	t.Run("PortScans", testPortScansBind)
	t.Run("Ports", testPortsBind)
}

func TestOne(t *testing.T) {
	t.Run("NodeScans", testNodeScansOne)
	t.Run("Nodes", testNodesOne)
	t.Run("PortScans", testPortScansOne)
	t.Run("Ports", testPortsOne)
}

func TestAll(t *testing.T) {
	t.Run("NodeScans", testNodeScansAll)
	t.Run("Nodes", testNodesAll)
	t.Run("PortScans", testPortScansAll)
	t.Run("Ports", testPortsAll)
}

func TestCount(t *testing.T) {
	t.Run("NodeScans", testNodeScansCount)
	t.Run("Nodes", testNodesCount)
	t.Run("PortScans", testPortScansCount)
	t.Run("Ports", testPortsCount)
}

func TestHooks(t *testing.T) {
	t.Run("NodeScans", testNodeScansHooks)
	t.Run("Nodes", testNodesHooks)
	t.Run("PortScans", testPortScansHooks)
	t.Run("Ports", testPortsHooks)
}

func TestInsert(t *testing.T) {
	t.Run("NodeScans", testNodeScansInsert)
	t.Run("NodeScans", testNodeScansInsertWhitelist)
	t.Run("Nodes", testNodesInsert)
	t.Run("Nodes", testNodesInsertWhitelist)
	t.Run("PortScans", testPortScansInsert)
	t.Run("PortScans", testPortScansInsertWhitelist)
	t.Run("Ports", testPortsInsert)
	t.Run("Ports", testPortsInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("NodeToNodeScanUsingNodeScan", testNodeToOneNodeScanUsingNodeScan)
	t.Run("PortScanToNodeUsingNode", testPortScanToOneNodeUsingNode)
	t.Run("PortToPortScanUsingPortScan", testPortToOnePortScanUsingPortScan)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("NodeScanToNodes", testNodeScanToManyNodes)
	t.Run("NodeToPortScans", testNodeToManyPortScans)
	t.Run("PortScanToPorts", testPortScanToManyPorts)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("NodeToNodeScanUsingNodes", testNodeToOneSetOpNodeScanUsingNodeScan)
	t.Run("PortScanToNodeUsingPortScans", testPortScanToOneSetOpNodeUsingNode)
	t.Run("PortToPortScanUsingPorts", testPortToOneSetOpPortScanUsingPortScan)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("NodeScanToNodes", testNodeScanToManyAddOpNodes)
	t.Run("NodeToPortScans", testNodeToManyAddOpPortScans)
	t.Run("PortScanToPorts", testPortScanToManyAddOpPorts)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {}

func TestReload(t *testing.T) {
	t.Run("NodeScans", testNodeScansReload)
	t.Run("Nodes", testNodesReload)
	t.Run("PortScans", testPortScansReload)
	t.Run("Ports", testPortsReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("NodeScans", testNodeScansReloadAll)
	t.Run("Nodes", testNodesReloadAll)
	t.Run("PortScans", testPortScansReloadAll)
	t.Run("Ports", testPortsReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("NodeScans", testNodeScansSelect)
	t.Run("Nodes", testNodesSelect)
	t.Run("PortScans", testPortScansSelect)
	t.Run("Ports", testPortsSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("NodeScans", testNodeScansUpdate)
	t.Run("Nodes", testNodesUpdate)
	t.Run("PortScans", testPortScansUpdate)
	t.Run("Ports", testPortsUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("NodeScans", testNodeScansSliceUpdateAll)
	t.Run("Nodes", testNodesSliceUpdateAll)
	t.Run("PortScans", testPortScansSliceUpdateAll)
	t.Run("Ports", testPortsSliceUpdateAll)
}
