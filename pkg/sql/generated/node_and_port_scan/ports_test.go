// Code generated by SQLBoiler 4.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testPorts(t *testing.T) {
	t.Parallel()

	query := Ports()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testPortsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Port{}
	if err = randomize.Struct(seed, o, portDBTypes, true, portColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Port struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Ports().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPortsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Port{}
	if err = randomize.Struct(seed, o, portDBTypes, true, portColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Port struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Ports().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Ports().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPortsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Port{}
	if err = randomize.Struct(seed, o, portDBTypes, true, portColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Port struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := PortSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Ports().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPortsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Port{}
	if err = randomize.Struct(seed, o, portDBTypes, true, portColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Port struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := PortExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Port exists: %s", err)
	}
	if !e {
		t.Errorf("Expected PortExists to return true, but got false.")
	}
}

func testPortsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Port{}
	if err = randomize.Struct(seed, o, portDBTypes, true, portColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Port struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	portFound, err := FindPort(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if portFound == nil {
		t.Error("want a record, got nil")
	}
}

func testPortsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Port{}
	if err = randomize.Struct(seed, o, portDBTypes, true, portColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Port struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Ports().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testPortsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Port{}
	if err = randomize.Struct(seed, o, portDBTypes, true, portColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Port struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Ports().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testPortsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	portOne := &Port{}
	portTwo := &Port{}
	if err = randomize.Struct(seed, portOne, portDBTypes, false, portColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Port struct: %s", err)
	}
	if err = randomize.Struct(seed, portTwo, portDBTypes, false, portColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Port struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = portOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = portTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Ports().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testPortsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	portOne := &Port{}
	portTwo := &Port{}
	if err = randomize.Struct(seed, portOne, portDBTypes, false, portColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Port struct: %s", err)
	}
	if err = randomize.Struct(seed, portTwo, portDBTypes, false, portColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Port struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = portOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = portTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Ports().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func portBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Port) error {
	*o = Port{}
	return nil
}

func portAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Port) error {
	*o = Port{}
	return nil
}

func portAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Port) error {
	*o = Port{}
	return nil
}

func portBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Port) error {
	*o = Port{}
	return nil
}

func portAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Port) error {
	*o = Port{}
	return nil
}

func portBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Port) error {
	*o = Port{}
	return nil
}

func portAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Port) error {
	*o = Port{}
	return nil
}

func portBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Port) error {
	*o = Port{}
	return nil
}

func portAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Port) error {
	*o = Port{}
	return nil
}

func testPortsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Port{}
	o := &Port{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, portDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Port object: %s", err)
	}

	AddPortHook(boil.BeforeInsertHook, portBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	portBeforeInsertHooks = []PortHook{}

	AddPortHook(boil.AfterInsertHook, portAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	portAfterInsertHooks = []PortHook{}

	AddPortHook(boil.AfterSelectHook, portAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	portAfterSelectHooks = []PortHook{}

	AddPortHook(boil.BeforeUpdateHook, portBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	portBeforeUpdateHooks = []PortHook{}

	AddPortHook(boil.AfterUpdateHook, portAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	portAfterUpdateHooks = []PortHook{}

	AddPortHook(boil.BeforeDeleteHook, portBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	portBeforeDeleteHooks = []PortHook{}

	AddPortHook(boil.AfterDeleteHook, portAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	portAfterDeleteHooks = []PortHook{}

	AddPortHook(boil.BeforeUpsertHook, portBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	portBeforeUpsertHooks = []PortHook{}

	AddPortHook(boil.AfterUpsertHook, portAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	portAfterUpsertHooks = []PortHook{}
}

func testPortsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Port{}
	if err = randomize.Struct(seed, o, portDBTypes, true, portColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Port struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Ports().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPortsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Port{}
	if err = randomize.Struct(seed, o, portDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Port struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(portColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Ports().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPortToOnePortScanUsingPortScan(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Port
	var foreign PortScan

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, portDBTypes, false, portColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Port struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, portScanDBTypes, false, portScanColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PortScan struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.PortScanID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.PortScan().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := PortSlice{&local}
	if err = local.L.LoadPortScan(ctx, tx, false, (*[]*Port)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.PortScan == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.PortScan = nil
	if err = local.L.LoadPortScan(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.PortScan == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testPortToOneSetOpPortScanUsingPortScan(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Port
	var b, c PortScan

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, portDBTypes, false, strmangle.SetComplement(portPrimaryKeyColumns, portColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, portScanDBTypes, false, strmangle.SetComplement(portScanPrimaryKeyColumns, portScanColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, portScanDBTypes, false, strmangle.SetComplement(portScanPrimaryKeyColumns, portScanColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*PortScan{&b, &c} {
		err = a.SetPortScan(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.PortScan != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Ports[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.PortScanID != x.ID {
			t.Error("foreign key was wrong value", a.PortScanID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.PortScanID))
		reflect.Indirect(reflect.ValueOf(&a.PortScanID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.PortScanID != x.ID {
			t.Error("foreign key was wrong value", a.PortScanID, x.ID)
		}
	}
}

func testPortsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Port{}
	if err = randomize.Struct(seed, o, portDBTypes, true, portColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Port struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testPortsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Port{}
	if err = randomize.Struct(seed, o, portDBTypes, true, portColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Port struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := PortSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testPortsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Port{}
	if err = randomize.Struct(seed, o, portDBTypes, true, portColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Port struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Ports().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	portDBTypes = map[string]string{`ID`: `INTEGER`, `CreatedAt`: `DATE`, `PortNumber`: `INTEGER`, `TransportProtocol`: `TEXT`, `PortScanID`: `INTEGER`}
	_           = bytes.MinRead
)

func testPortsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(portPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(portAllColumns) == len(portPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Port{}
	if err = randomize.Struct(seed, o, portDBTypes, true, portColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Port struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Ports().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, portDBTypes, true, portPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Port struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testPortsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(portAllColumns) == len(portPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Port{}
	if err = randomize.Struct(seed, o, portDBTypes, true, portColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Port struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Ports().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, portDBTypes, true, portPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Port struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(portAllColumns, portPrimaryKeyColumns) {
		fields = portAllColumns
	} else {
		fields = strmangle.SetComplement(
			portAllColumns,
			portPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := PortSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}
