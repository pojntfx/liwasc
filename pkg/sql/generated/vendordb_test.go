// Code generated by SQLBoiler 3.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testVendordbs(t *testing.T) {
	t.Parallel()

	query := Vendordbs()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testVendordbsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Vendordb{}
	if err = randomize.Struct(seed, o, vendordbDBTypes, true, vendordbColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Vendordb struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Vendordbs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testVendordbsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Vendordb{}
	if err = randomize.Struct(seed, o, vendordbDBTypes, true, vendordbColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Vendordb struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Vendordbs().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Vendordbs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testVendordbsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Vendordb{}
	if err = randomize.Struct(seed, o, vendordbDBTypes, true, vendordbColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Vendordb struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := VendordbSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Vendordbs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testVendordbsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Vendordb{}
	if err = randomize.Struct(seed, o, vendordbDBTypes, true, vendordbColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Vendordb struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := VendordbExists(ctx, tx, o.Mac)
	if err != nil {
		t.Errorf("Unable to check if Vendordb exists: %s", err)
	}
	if !e {
		t.Errorf("Expected VendordbExists to return true, but got false.")
	}
}

func testVendordbsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Vendordb{}
	if err = randomize.Struct(seed, o, vendordbDBTypes, true, vendordbColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Vendordb struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	vendordbFound, err := FindVendordb(ctx, tx, o.Mac)
	if err != nil {
		t.Error(err)
	}

	if vendordbFound == nil {
		t.Error("want a record, got nil")
	}
}

func testVendordbsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Vendordb{}
	if err = randomize.Struct(seed, o, vendordbDBTypes, true, vendordbColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Vendordb struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Vendordbs().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testVendordbsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Vendordb{}
	if err = randomize.Struct(seed, o, vendordbDBTypes, true, vendordbColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Vendordb struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Vendordbs().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testVendordbsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	vendordbOne := &Vendordb{}
	vendordbTwo := &Vendordb{}
	if err = randomize.Struct(seed, vendordbOne, vendordbDBTypes, false, vendordbColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Vendordb struct: %s", err)
	}
	if err = randomize.Struct(seed, vendordbTwo, vendordbDBTypes, false, vendordbColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Vendordb struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = vendordbOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = vendordbTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Vendordbs().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testVendordbsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	vendordbOne := &Vendordb{}
	vendordbTwo := &Vendordb{}
	if err = randomize.Struct(seed, vendordbOne, vendordbDBTypes, false, vendordbColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Vendordb struct: %s", err)
	}
	if err = randomize.Struct(seed, vendordbTwo, vendordbDBTypes, false, vendordbColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Vendordb struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = vendordbOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = vendordbTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Vendordbs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func vendordbBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Vendordb) error {
	*o = Vendordb{}
	return nil
}

func vendordbAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Vendordb) error {
	*o = Vendordb{}
	return nil
}

func vendordbAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Vendordb) error {
	*o = Vendordb{}
	return nil
}

func vendordbBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Vendordb) error {
	*o = Vendordb{}
	return nil
}

func vendordbAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Vendordb) error {
	*o = Vendordb{}
	return nil
}

func vendordbBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Vendordb) error {
	*o = Vendordb{}
	return nil
}

func vendordbAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Vendordb) error {
	*o = Vendordb{}
	return nil
}

func vendordbBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Vendordb) error {
	*o = Vendordb{}
	return nil
}

func vendordbAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Vendordb) error {
	*o = Vendordb{}
	return nil
}

func testVendordbsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Vendordb{}
	o := &Vendordb{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, vendordbDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Vendordb object: %s", err)
	}

	AddVendordbHook(boil.BeforeInsertHook, vendordbBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	vendordbBeforeInsertHooks = []VendordbHook{}

	AddVendordbHook(boil.AfterInsertHook, vendordbAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	vendordbAfterInsertHooks = []VendordbHook{}

	AddVendordbHook(boil.AfterSelectHook, vendordbAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	vendordbAfterSelectHooks = []VendordbHook{}

	AddVendordbHook(boil.BeforeUpdateHook, vendordbBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	vendordbBeforeUpdateHooks = []VendordbHook{}

	AddVendordbHook(boil.AfterUpdateHook, vendordbAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	vendordbAfterUpdateHooks = []VendordbHook{}

	AddVendordbHook(boil.BeforeDeleteHook, vendordbBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	vendordbBeforeDeleteHooks = []VendordbHook{}

	AddVendordbHook(boil.AfterDeleteHook, vendordbAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	vendordbAfterDeleteHooks = []VendordbHook{}

	AddVendordbHook(boil.BeforeUpsertHook, vendordbBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	vendordbBeforeUpsertHooks = []VendordbHook{}

	AddVendordbHook(boil.AfterUpsertHook, vendordbAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	vendordbAfterUpsertHooks = []VendordbHook{}
}

func testVendordbsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Vendordb{}
	if err = randomize.Struct(seed, o, vendordbDBTypes, true, vendordbColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Vendordb struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Vendordbs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testVendordbsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Vendordb{}
	if err = randomize.Struct(seed, o, vendordbDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Vendordb struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(vendordbColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Vendordbs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testVendordbsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Vendordb{}
	if err = randomize.Struct(seed, o, vendordbDBTypes, true, vendordbColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Vendordb struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testVendordbsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Vendordb{}
	if err = randomize.Struct(seed, o, vendordbDBTypes, true, vendordbColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Vendordb struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := VendordbSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testVendordbsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Vendordb{}
	if err = randomize.Struct(seed, o, vendordbDBTypes, true, vendordbColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Vendordb struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Vendordbs().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	vendordbDBTypes = map[string]string{`Mac`: `INTEGER`, `Vendor`: `TEXT`, `Registry`: `TEXT`, `Organization`: `TEXT`, `Address`: `TEXT`, `Visibility`: `INTEGER`}
	_               = bytes.MinRead
)

func testVendordbsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(vendordbPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(vendordbAllColumns) == len(vendordbPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Vendordb{}
	if err = randomize.Struct(seed, o, vendordbDBTypes, true, vendordbColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Vendordb struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Vendordbs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, vendordbDBTypes, true, vendordbPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Vendordb struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testVendordbsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(vendordbAllColumns) == len(vendordbPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Vendordb{}
	if err = randomize.Struct(seed, o, vendordbDBTypes, true, vendordbColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Vendordb struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Vendordbs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, vendordbDBTypes, true, vendordbPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Vendordb struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(vendordbAllColumns, vendordbPrimaryKeyColumns) {
		fields = vendordbAllColumns
	} else {
		fields = strmangle.SetComplement(
			vendordbAllColumns,
			vendordbPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := VendordbSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}
