// Code generated by SQLBoiler 3.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testNodeWakes(t *testing.T) {
	t.Parallel()

	query := NodeWakes()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testNodeWakesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NodeWake{}
	if err = randomize.Struct(seed, o, nodeWakeDBTypes, true, nodeWakeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NodeWake struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := NodeWakes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testNodeWakesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NodeWake{}
	if err = randomize.Struct(seed, o, nodeWakeDBTypes, true, nodeWakeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NodeWake struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := NodeWakes().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := NodeWakes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testNodeWakesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NodeWake{}
	if err = randomize.Struct(seed, o, nodeWakeDBTypes, true, nodeWakeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NodeWake struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := NodeWakeSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := NodeWakes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testNodeWakesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NodeWake{}
	if err = randomize.Struct(seed, o, nodeWakeDBTypes, true, nodeWakeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NodeWake struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := NodeWakeExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if NodeWake exists: %s", err)
	}
	if !e {
		t.Errorf("Expected NodeWakeExists to return true, but got false.")
	}
}

func testNodeWakesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NodeWake{}
	if err = randomize.Struct(seed, o, nodeWakeDBTypes, true, nodeWakeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NodeWake struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	nodeWakeFound, err := FindNodeWake(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if nodeWakeFound == nil {
		t.Error("want a record, got nil")
	}
}

func testNodeWakesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NodeWake{}
	if err = randomize.Struct(seed, o, nodeWakeDBTypes, true, nodeWakeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NodeWake struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = NodeWakes().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testNodeWakesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NodeWake{}
	if err = randomize.Struct(seed, o, nodeWakeDBTypes, true, nodeWakeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NodeWake struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := NodeWakes().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testNodeWakesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	nodeWakeOne := &NodeWake{}
	nodeWakeTwo := &NodeWake{}
	if err = randomize.Struct(seed, nodeWakeOne, nodeWakeDBTypes, false, nodeWakeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NodeWake struct: %s", err)
	}
	if err = randomize.Struct(seed, nodeWakeTwo, nodeWakeDBTypes, false, nodeWakeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NodeWake struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = nodeWakeOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = nodeWakeTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := NodeWakes().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testNodeWakesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	nodeWakeOne := &NodeWake{}
	nodeWakeTwo := &NodeWake{}
	if err = randomize.Struct(seed, nodeWakeOne, nodeWakeDBTypes, false, nodeWakeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NodeWake struct: %s", err)
	}
	if err = randomize.Struct(seed, nodeWakeTwo, nodeWakeDBTypes, false, nodeWakeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NodeWake struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = nodeWakeOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = nodeWakeTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := NodeWakes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func nodeWakeBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *NodeWake) error {
	*o = NodeWake{}
	return nil
}

func nodeWakeAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *NodeWake) error {
	*o = NodeWake{}
	return nil
}

func nodeWakeAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *NodeWake) error {
	*o = NodeWake{}
	return nil
}

func nodeWakeBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *NodeWake) error {
	*o = NodeWake{}
	return nil
}

func nodeWakeAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *NodeWake) error {
	*o = NodeWake{}
	return nil
}

func nodeWakeBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *NodeWake) error {
	*o = NodeWake{}
	return nil
}

func nodeWakeAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *NodeWake) error {
	*o = NodeWake{}
	return nil
}

func nodeWakeBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *NodeWake) error {
	*o = NodeWake{}
	return nil
}

func nodeWakeAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *NodeWake) error {
	*o = NodeWake{}
	return nil
}

func testNodeWakesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &NodeWake{}
	o := &NodeWake{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, nodeWakeDBTypes, false); err != nil {
		t.Errorf("Unable to randomize NodeWake object: %s", err)
	}

	AddNodeWakeHook(boil.BeforeInsertHook, nodeWakeBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	nodeWakeBeforeInsertHooks = []NodeWakeHook{}

	AddNodeWakeHook(boil.AfterInsertHook, nodeWakeAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	nodeWakeAfterInsertHooks = []NodeWakeHook{}

	AddNodeWakeHook(boil.AfterSelectHook, nodeWakeAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	nodeWakeAfterSelectHooks = []NodeWakeHook{}

	AddNodeWakeHook(boil.BeforeUpdateHook, nodeWakeBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	nodeWakeBeforeUpdateHooks = []NodeWakeHook{}

	AddNodeWakeHook(boil.AfterUpdateHook, nodeWakeAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	nodeWakeAfterUpdateHooks = []NodeWakeHook{}

	AddNodeWakeHook(boil.BeforeDeleteHook, nodeWakeBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	nodeWakeBeforeDeleteHooks = []NodeWakeHook{}

	AddNodeWakeHook(boil.AfterDeleteHook, nodeWakeAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	nodeWakeAfterDeleteHooks = []NodeWakeHook{}

	AddNodeWakeHook(boil.BeforeUpsertHook, nodeWakeBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	nodeWakeBeforeUpsertHooks = []NodeWakeHook{}

	AddNodeWakeHook(boil.AfterUpsertHook, nodeWakeAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	nodeWakeAfterUpsertHooks = []NodeWakeHook{}
}

func testNodeWakesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NodeWake{}
	if err = randomize.Struct(seed, o, nodeWakeDBTypes, true, nodeWakeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NodeWake struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := NodeWakes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testNodeWakesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NodeWake{}
	if err = randomize.Struct(seed, o, nodeWakeDBTypes, true); err != nil {
		t.Errorf("Unable to randomize NodeWake struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(nodeWakeColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := NodeWakes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testNodeWakesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NodeWake{}
	if err = randomize.Struct(seed, o, nodeWakeDBTypes, true, nodeWakeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NodeWake struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testNodeWakesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NodeWake{}
	if err = randomize.Struct(seed, o, nodeWakeDBTypes, true, nodeWakeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NodeWake struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := NodeWakeSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testNodeWakesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NodeWake{}
	if err = randomize.Struct(seed, o, nodeWakeDBTypes, true, nodeWakeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NodeWake struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := NodeWakes().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	nodeWakeDBTypes = map[string]string{`ID`: `INTEGER`, `CreatedAt`: `DATE`, `Done`: `INTEGER`}
	_               = bytes.MinRead
)

func testNodeWakesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(nodeWakePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(nodeWakeAllColumns) == len(nodeWakePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &NodeWake{}
	if err = randomize.Struct(seed, o, nodeWakeDBTypes, true, nodeWakeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NodeWake struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := NodeWakes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, nodeWakeDBTypes, true, nodeWakePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize NodeWake struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testNodeWakesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(nodeWakeAllColumns) == len(nodeWakePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &NodeWake{}
	if err = randomize.Struct(seed, o, nodeWakeDBTypes, true, nodeWakeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NodeWake struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := NodeWakes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, nodeWakeDBTypes, true, nodeWakePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize NodeWake struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(nodeWakeAllColumns, nodeWakePrimaryKeyColumns) {
		fields = nodeWakeAllColumns
	} else {
		fields = strmangle.SetComplement(
			nodeWakeAllColumns,
			nodeWakePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := NodeWakeSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}
