// Code generated by SQLBoiler 3.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// NodeScansNode is an object representing the database table.
type NodeScansNode struct {
	ID         int64     `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreatedAt  time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	NodeID     string    `boil:"node_id" json:"node_id" toml:"node_id" yaml:"node_id"`
	NodeScanID int64     `boil:"node_scan_id" json:"node_scan_id" toml:"node_scan_id" yaml:"node_scan_id"`

	R *nodeScansNodeR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L nodeScansNodeL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var NodeScansNodeColumns = struct {
	ID         string
	CreatedAt  string
	NodeID     string
	NodeScanID string
}{
	ID:         "id",
	CreatedAt:  "created_at",
	NodeID:     "node_id",
	NodeScanID: "node_scan_id",
}

// Generated where

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}

var NodeScansNodeWhere = struct {
	ID         whereHelperint64
	CreatedAt  whereHelpertime_Time
	NodeID     whereHelperstring
	NodeScanID whereHelperint64
}{
	ID:         whereHelperint64{field: "\"node_scans_nodes\".\"id\""},
	CreatedAt:  whereHelpertime_Time{field: "\"node_scans_nodes\".\"created_at\""},
	NodeID:     whereHelperstring{field: "\"node_scans_nodes\".\"node_id\""},
	NodeScanID: whereHelperint64{field: "\"node_scans_nodes\".\"node_scan_id\""},
}

// NodeScansNodeRels is where relationship names are stored.
var NodeScansNodeRels = struct {
}{}

// nodeScansNodeR is where relationships are stored.
type nodeScansNodeR struct {
}

// NewStruct creates a new relationship struct
func (*nodeScansNodeR) NewStruct() *nodeScansNodeR {
	return &nodeScansNodeR{}
}

// nodeScansNodeL is where Load methods for each relationship are stored.
type nodeScansNodeL struct{}

var (
	nodeScansNodeAllColumns            = []string{"id", "created_at", "node_id", "node_scan_id"}
	nodeScansNodeColumnsWithoutDefault = []string{"created_at", "node_id", "node_scan_id"}
	nodeScansNodeColumnsWithDefault    = []string{"id"}
	nodeScansNodePrimaryKeyColumns     = []string{"id"}
)

type (
	// NodeScansNodeSlice is an alias for a slice of pointers to NodeScansNode.
	// This should generally be used opposed to []NodeScansNode.
	NodeScansNodeSlice []*NodeScansNode
	// NodeScansNodeHook is the signature for custom NodeScansNode hook methods
	NodeScansNodeHook func(context.Context, boil.ContextExecutor, *NodeScansNode) error

	nodeScansNodeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	nodeScansNodeType                 = reflect.TypeOf(&NodeScansNode{})
	nodeScansNodeMapping              = queries.MakeStructMapping(nodeScansNodeType)
	nodeScansNodePrimaryKeyMapping, _ = queries.BindMapping(nodeScansNodeType, nodeScansNodeMapping, nodeScansNodePrimaryKeyColumns)
	nodeScansNodeInsertCacheMut       sync.RWMutex
	nodeScansNodeInsertCache          = make(map[string]insertCache)
	nodeScansNodeUpdateCacheMut       sync.RWMutex
	nodeScansNodeUpdateCache          = make(map[string]updateCache)
	nodeScansNodeUpsertCacheMut       sync.RWMutex
	nodeScansNodeUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var nodeScansNodeBeforeInsertHooks []NodeScansNodeHook
var nodeScansNodeBeforeUpdateHooks []NodeScansNodeHook
var nodeScansNodeBeforeDeleteHooks []NodeScansNodeHook
var nodeScansNodeBeforeUpsertHooks []NodeScansNodeHook

var nodeScansNodeAfterInsertHooks []NodeScansNodeHook
var nodeScansNodeAfterSelectHooks []NodeScansNodeHook
var nodeScansNodeAfterUpdateHooks []NodeScansNodeHook
var nodeScansNodeAfterDeleteHooks []NodeScansNodeHook
var nodeScansNodeAfterUpsertHooks []NodeScansNodeHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *NodeScansNode) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range nodeScansNodeBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *NodeScansNode) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range nodeScansNodeBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *NodeScansNode) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range nodeScansNodeBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *NodeScansNode) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range nodeScansNodeBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *NodeScansNode) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range nodeScansNodeAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *NodeScansNode) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range nodeScansNodeAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *NodeScansNode) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range nodeScansNodeAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *NodeScansNode) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range nodeScansNodeAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *NodeScansNode) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range nodeScansNodeAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddNodeScansNodeHook registers your hook function for all future operations.
func AddNodeScansNodeHook(hookPoint boil.HookPoint, nodeScansNodeHook NodeScansNodeHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		nodeScansNodeBeforeInsertHooks = append(nodeScansNodeBeforeInsertHooks, nodeScansNodeHook)
	case boil.BeforeUpdateHook:
		nodeScansNodeBeforeUpdateHooks = append(nodeScansNodeBeforeUpdateHooks, nodeScansNodeHook)
	case boil.BeforeDeleteHook:
		nodeScansNodeBeforeDeleteHooks = append(nodeScansNodeBeforeDeleteHooks, nodeScansNodeHook)
	case boil.BeforeUpsertHook:
		nodeScansNodeBeforeUpsertHooks = append(nodeScansNodeBeforeUpsertHooks, nodeScansNodeHook)
	case boil.AfterInsertHook:
		nodeScansNodeAfterInsertHooks = append(nodeScansNodeAfterInsertHooks, nodeScansNodeHook)
	case boil.AfterSelectHook:
		nodeScansNodeAfterSelectHooks = append(nodeScansNodeAfterSelectHooks, nodeScansNodeHook)
	case boil.AfterUpdateHook:
		nodeScansNodeAfterUpdateHooks = append(nodeScansNodeAfterUpdateHooks, nodeScansNodeHook)
	case boil.AfterDeleteHook:
		nodeScansNodeAfterDeleteHooks = append(nodeScansNodeAfterDeleteHooks, nodeScansNodeHook)
	case boil.AfterUpsertHook:
		nodeScansNodeAfterUpsertHooks = append(nodeScansNodeAfterUpsertHooks, nodeScansNodeHook)
	}
}

// One returns a single nodeScansNode record from the query.
func (q nodeScansNodeQuery) One(ctx context.Context, exec boil.ContextExecutor) (*NodeScansNode, error) {
	o := &NodeScansNode{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for node_scans_nodes")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all NodeScansNode records from the query.
func (q nodeScansNodeQuery) All(ctx context.Context, exec boil.ContextExecutor) (NodeScansNodeSlice, error) {
	var o []*NodeScansNode

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to NodeScansNode slice")
	}

	if len(nodeScansNodeAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all NodeScansNode records in the query.
func (q nodeScansNodeQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count node_scans_nodes rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q nodeScansNodeQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if node_scans_nodes exists")
	}

	return count > 0, nil
}

// NodeScansNodes retrieves all the records using an executor.
func NodeScansNodes(mods ...qm.QueryMod) nodeScansNodeQuery {
	mods = append(mods, qm.From("\"node_scans_nodes\""))
	return nodeScansNodeQuery{NewQuery(mods...)}
}

// FindNodeScansNode retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindNodeScansNode(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*NodeScansNode, error) {
	nodeScansNodeObj := &NodeScansNode{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"node_scans_nodes\" where \"id\"=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, nodeScansNodeObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from node_scans_nodes")
	}

	return nodeScansNodeObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *NodeScansNode) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no node_scans_nodes provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(nodeScansNodeColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	nodeScansNodeInsertCacheMut.RLock()
	cache, cached := nodeScansNodeInsertCache[key]
	nodeScansNodeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			nodeScansNodeAllColumns,
			nodeScansNodeColumnsWithDefault,
			nodeScansNodeColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(nodeScansNodeType, nodeScansNodeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(nodeScansNodeType, nodeScansNodeMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"node_scans_nodes\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"node_scans_nodes\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT \"%s\" FROM \"node_scans_nodes\" WHERE %s", strings.Join(returnColumns, "\",\""), strmangle.WhereClause("\"", "\"", 0, nodeScansNodePrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into node_scans_nodes")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == nodeScansNodeMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for node_scans_nodes")
	}

CacheNoHooks:
	if !cached {
		nodeScansNodeInsertCacheMut.Lock()
		nodeScansNodeInsertCache[key] = cache
		nodeScansNodeInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the NodeScansNode.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *NodeScansNode) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	nodeScansNodeUpdateCacheMut.RLock()
	cache, cached := nodeScansNodeUpdateCache[key]
	nodeScansNodeUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			nodeScansNodeAllColumns,
			nodeScansNodePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update node_scans_nodes, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"node_scans_nodes\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, nodeScansNodePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(nodeScansNodeType, nodeScansNodeMapping, append(wl, nodeScansNodePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update node_scans_nodes row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for node_scans_nodes")
	}

	if !cached {
		nodeScansNodeUpdateCacheMut.Lock()
		nodeScansNodeUpdateCache[key] = cache
		nodeScansNodeUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q nodeScansNodeQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for node_scans_nodes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for node_scans_nodes")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o NodeScansNodeSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), nodeScansNodePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"node_scans_nodes\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, nodeScansNodePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in nodeScansNode slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all nodeScansNode")
	}
	return rowsAff, nil
}

// Delete deletes a single NodeScansNode record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *NodeScansNode) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no NodeScansNode provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), nodeScansNodePrimaryKeyMapping)
	sql := "DELETE FROM \"node_scans_nodes\" WHERE \"id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from node_scans_nodes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for node_scans_nodes")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q nodeScansNodeQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no nodeScansNodeQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from node_scans_nodes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for node_scans_nodes")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o NodeScansNodeSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(nodeScansNodeBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), nodeScansNodePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"node_scans_nodes\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, nodeScansNodePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from nodeScansNode slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for node_scans_nodes")
	}

	if len(nodeScansNodeAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *NodeScansNode) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindNodeScansNode(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *NodeScansNodeSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := NodeScansNodeSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), nodeScansNodePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"node_scans_nodes\".* FROM \"node_scans_nodes\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, nodeScansNodePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in NodeScansNodeSlice")
	}

	*o = slice

	return nil
}

// NodeScansNodeExists checks if the NodeScansNode row exists.
func NodeScansNodeExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"node_scans_nodes\" where \"id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if node_scans_nodes exists")
	}

	return exists, nil
}
