// Code generated by SQLBoiler 3.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testNodeScansNodes(t *testing.T) {
	t.Parallel()

	query := NodeScansNodes()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testNodeScansNodesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NodeScansNode{}
	if err = randomize.Struct(seed, o, nodeScansNodeDBTypes, true, nodeScansNodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NodeScansNode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := NodeScansNodes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testNodeScansNodesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NodeScansNode{}
	if err = randomize.Struct(seed, o, nodeScansNodeDBTypes, true, nodeScansNodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NodeScansNode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := NodeScansNodes().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := NodeScansNodes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testNodeScansNodesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NodeScansNode{}
	if err = randomize.Struct(seed, o, nodeScansNodeDBTypes, true, nodeScansNodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NodeScansNode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := NodeScansNodeSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := NodeScansNodes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testNodeScansNodesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NodeScansNode{}
	if err = randomize.Struct(seed, o, nodeScansNodeDBTypes, true, nodeScansNodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NodeScansNode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := NodeScansNodeExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if NodeScansNode exists: %s", err)
	}
	if !e {
		t.Errorf("Expected NodeScansNodeExists to return true, but got false.")
	}
}

func testNodeScansNodesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NodeScansNode{}
	if err = randomize.Struct(seed, o, nodeScansNodeDBTypes, true, nodeScansNodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NodeScansNode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	nodeScansNodeFound, err := FindNodeScansNode(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if nodeScansNodeFound == nil {
		t.Error("want a record, got nil")
	}
}

func testNodeScansNodesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NodeScansNode{}
	if err = randomize.Struct(seed, o, nodeScansNodeDBTypes, true, nodeScansNodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NodeScansNode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = NodeScansNodes().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testNodeScansNodesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NodeScansNode{}
	if err = randomize.Struct(seed, o, nodeScansNodeDBTypes, true, nodeScansNodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NodeScansNode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := NodeScansNodes().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testNodeScansNodesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	nodeScansNodeOne := &NodeScansNode{}
	nodeScansNodeTwo := &NodeScansNode{}
	if err = randomize.Struct(seed, nodeScansNodeOne, nodeScansNodeDBTypes, false, nodeScansNodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NodeScansNode struct: %s", err)
	}
	if err = randomize.Struct(seed, nodeScansNodeTwo, nodeScansNodeDBTypes, false, nodeScansNodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NodeScansNode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = nodeScansNodeOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = nodeScansNodeTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := NodeScansNodes().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testNodeScansNodesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	nodeScansNodeOne := &NodeScansNode{}
	nodeScansNodeTwo := &NodeScansNode{}
	if err = randomize.Struct(seed, nodeScansNodeOne, nodeScansNodeDBTypes, false, nodeScansNodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NodeScansNode struct: %s", err)
	}
	if err = randomize.Struct(seed, nodeScansNodeTwo, nodeScansNodeDBTypes, false, nodeScansNodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NodeScansNode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = nodeScansNodeOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = nodeScansNodeTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := NodeScansNodes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func nodeScansNodeBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *NodeScansNode) error {
	*o = NodeScansNode{}
	return nil
}

func nodeScansNodeAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *NodeScansNode) error {
	*o = NodeScansNode{}
	return nil
}

func nodeScansNodeAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *NodeScansNode) error {
	*o = NodeScansNode{}
	return nil
}

func nodeScansNodeBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *NodeScansNode) error {
	*o = NodeScansNode{}
	return nil
}

func nodeScansNodeAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *NodeScansNode) error {
	*o = NodeScansNode{}
	return nil
}

func nodeScansNodeBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *NodeScansNode) error {
	*o = NodeScansNode{}
	return nil
}

func nodeScansNodeAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *NodeScansNode) error {
	*o = NodeScansNode{}
	return nil
}

func nodeScansNodeBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *NodeScansNode) error {
	*o = NodeScansNode{}
	return nil
}

func nodeScansNodeAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *NodeScansNode) error {
	*o = NodeScansNode{}
	return nil
}

func testNodeScansNodesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &NodeScansNode{}
	o := &NodeScansNode{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, nodeScansNodeDBTypes, false); err != nil {
		t.Errorf("Unable to randomize NodeScansNode object: %s", err)
	}

	AddNodeScansNodeHook(boil.BeforeInsertHook, nodeScansNodeBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	nodeScansNodeBeforeInsertHooks = []NodeScansNodeHook{}

	AddNodeScansNodeHook(boil.AfterInsertHook, nodeScansNodeAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	nodeScansNodeAfterInsertHooks = []NodeScansNodeHook{}

	AddNodeScansNodeHook(boil.AfterSelectHook, nodeScansNodeAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	nodeScansNodeAfterSelectHooks = []NodeScansNodeHook{}

	AddNodeScansNodeHook(boil.BeforeUpdateHook, nodeScansNodeBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	nodeScansNodeBeforeUpdateHooks = []NodeScansNodeHook{}

	AddNodeScansNodeHook(boil.AfterUpdateHook, nodeScansNodeAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	nodeScansNodeAfterUpdateHooks = []NodeScansNodeHook{}

	AddNodeScansNodeHook(boil.BeforeDeleteHook, nodeScansNodeBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	nodeScansNodeBeforeDeleteHooks = []NodeScansNodeHook{}

	AddNodeScansNodeHook(boil.AfterDeleteHook, nodeScansNodeAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	nodeScansNodeAfterDeleteHooks = []NodeScansNodeHook{}

	AddNodeScansNodeHook(boil.BeforeUpsertHook, nodeScansNodeBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	nodeScansNodeBeforeUpsertHooks = []NodeScansNodeHook{}

	AddNodeScansNodeHook(boil.AfterUpsertHook, nodeScansNodeAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	nodeScansNodeAfterUpsertHooks = []NodeScansNodeHook{}
}

func testNodeScansNodesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NodeScansNode{}
	if err = randomize.Struct(seed, o, nodeScansNodeDBTypes, true, nodeScansNodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NodeScansNode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := NodeScansNodes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testNodeScansNodesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NodeScansNode{}
	if err = randomize.Struct(seed, o, nodeScansNodeDBTypes, true); err != nil {
		t.Errorf("Unable to randomize NodeScansNode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(nodeScansNodeColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := NodeScansNodes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testNodeScansNodesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NodeScansNode{}
	if err = randomize.Struct(seed, o, nodeScansNodeDBTypes, true, nodeScansNodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NodeScansNode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testNodeScansNodesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NodeScansNode{}
	if err = randomize.Struct(seed, o, nodeScansNodeDBTypes, true, nodeScansNodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NodeScansNode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := NodeScansNodeSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testNodeScansNodesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NodeScansNode{}
	if err = randomize.Struct(seed, o, nodeScansNodeDBTypes, true, nodeScansNodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NodeScansNode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := NodeScansNodes().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	nodeScansNodeDBTypes = map[string]string{`ID`: `INTEGER`, `CreatedAt`: `DATE`, `NodeID`: `TEXT`, `NodeScanID`: `INTEGER`}
	_                    = bytes.MinRead
)

func testNodeScansNodesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(nodeScansNodePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(nodeScansNodeAllColumns) == len(nodeScansNodePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &NodeScansNode{}
	if err = randomize.Struct(seed, o, nodeScansNodeDBTypes, true, nodeScansNodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NodeScansNode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := NodeScansNodes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, nodeScansNodeDBTypes, true, nodeScansNodePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize NodeScansNode struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testNodeScansNodesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(nodeScansNodeAllColumns) == len(nodeScansNodePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &NodeScansNode{}
	if err = randomize.Struct(seed, o, nodeScansNodeDBTypes, true, nodeScansNodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NodeScansNode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := NodeScansNodes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, nodeScansNodeDBTypes, true, nodeScansNodePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize NodeScansNode struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(nodeScansNodeAllColumns, nodeScansNodePrimaryKeyColumns) {
		fields = nodeScansNodeAllColumns
	} else {
		fields = strmangle.SetComplement(
			nodeScansNodeAllColumns,
			nodeScansNodePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := NodeScansNodeSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}
