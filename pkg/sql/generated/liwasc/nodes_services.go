// Code generated by SQLBoiler 3.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// NodesService is an object representing the database table.
type NodesService struct {
	ID        int64  `boil:"id" json:"id" toml:"id" yaml:"id"`
	NodeID    string `boil:"node_id" json:"node_id" toml:"node_id" yaml:"node_id"`
	ServiceID int64  `boil:"service_id" json:"service_id" toml:"service_id" yaml:"service_id"`

	R *nodesServiceR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L nodesServiceL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var NodesServiceColumns = struct {
	ID        string
	NodeID    string
	ServiceID string
}{
	ID:        "id",
	NodeID:    "node_id",
	ServiceID: "service_id",
}

// Generated where

var NodesServiceWhere = struct {
	ID        whereHelperint64
	NodeID    whereHelperstring
	ServiceID whereHelperint64
}{
	ID:        whereHelperint64{field: "\"nodes_services\".\"id\""},
	NodeID:    whereHelperstring{field: "\"nodes_services\".\"node_id\""},
	ServiceID: whereHelperint64{field: "\"nodes_services\".\"service_id\""},
}

// NodesServiceRels is where relationship names are stored.
var NodesServiceRels = struct {
}{}

// nodesServiceR is where relationships are stored.
type nodesServiceR struct {
}

// NewStruct creates a new relationship struct
func (*nodesServiceR) NewStruct() *nodesServiceR {
	return &nodesServiceR{}
}

// nodesServiceL is where Load methods for each relationship are stored.
type nodesServiceL struct{}

var (
	nodesServiceAllColumns            = []string{"id", "node_id", "service_id"}
	nodesServiceColumnsWithoutDefault = []string{"node_id", "service_id"}
	nodesServiceColumnsWithDefault    = []string{"id"}
	nodesServicePrimaryKeyColumns     = []string{"id"}
)

type (
	// NodesServiceSlice is an alias for a slice of pointers to NodesService.
	// This should generally be used opposed to []NodesService.
	NodesServiceSlice []*NodesService
	// NodesServiceHook is the signature for custom NodesService hook methods
	NodesServiceHook func(context.Context, boil.ContextExecutor, *NodesService) error

	nodesServiceQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	nodesServiceType                 = reflect.TypeOf(&NodesService{})
	nodesServiceMapping              = queries.MakeStructMapping(nodesServiceType)
	nodesServicePrimaryKeyMapping, _ = queries.BindMapping(nodesServiceType, nodesServiceMapping, nodesServicePrimaryKeyColumns)
	nodesServiceInsertCacheMut       sync.RWMutex
	nodesServiceInsertCache          = make(map[string]insertCache)
	nodesServiceUpdateCacheMut       sync.RWMutex
	nodesServiceUpdateCache          = make(map[string]updateCache)
	nodesServiceUpsertCacheMut       sync.RWMutex
	nodesServiceUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var nodesServiceBeforeInsertHooks []NodesServiceHook
var nodesServiceBeforeUpdateHooks []NodesServiceHook
var nodesServiceBeforeDeleteHooks []NodesServiceHook
var nodesServiceBeforeUpsertHooks []NodesServiceHook

var nodesServiceAfterInsertHooks []NodesServiceHook
var nodesServiceAfterSelectHooks []NodesServiceHook
var nodesServiceAfterUpdateHooks []NodesServiceHook
var nodesServiceAfterDeleteHooks []NodesServiceHook
var nodesServiceAfterUpsertHooks []NodesServiceHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *NodesService) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range nodesServiceBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *NodesService) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range nodesServiceBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *NodesService) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range nodesServiceBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *NodesService) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range nodesServiceBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *NodesService) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range nodesServiceAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *NodesService) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range nodesServiceAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *NodesService) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range nodesServiceAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *NodesService) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range nodesServiceAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *NodesService) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range nodesServiceAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddNodesServiceHook registers your hook function for all future operations.
func AddNodesServiceHook(hookPoint boil.HookPoint, nodesServiceHook NodesServiceHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		nodesServiceBeforeInsertHooks = append(nodesServiceBeforeInsertHooks, nodesServiceHook)
	case boil.BeforeUpdateHook:
		nodesServiceBeforeUpdateHooks = append(nodesServiceBeforeUpdateHooks, nodesServiceHook)
	case boil.BeforeDeleteHook:
		nodesServiceBeforeDeleteHooks = append(nodesServiceBeforeDeleteHooks, nodesServiceHook)
	case boil.BeforeUpsertHook:
		nodesServiceBeforeUpsertHooks = append(nodesServiceBeforeUpsertHooks, nodesServiceHook)
	case boil.AfterInsertHook:
		nodesServiceAfterInsertHooks = append(nodesServiceAfterInsertHooks, nodesServiceHook)
	case boil.AfterSelectHook:
		nodesServiceAfterSelectHooks = append(nodesServiceAfterSelectHooks, nodesServiceHook)
	case boil.AfterUpdateHook:
		nodesServiceAfterUpdateHooks = append(nodesServiceAfterUpdateHooks, nodesServiceHook)
	case boil.AfterDeleteHook:
		nodesServiceAfterDeleteHooks = append(nodesServiceAfterDeleteHooks, nodesServiceHook)
	case boil.AfterUpsertHook:
		nodesServiceAfterUpsertHooks = append(nodesServiceAfterUpsertHooks, nodesServiceHook)
	}
}

// One returns a single nodesService record from the query.
func (q nodesServiceQuery) One(ctx context.Context, exec boil.ContextExecutor) (*NodesService, error) {
	o := &NodesService{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for nodes_services")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all NodesService records from the query.
func (q nodesServiceQuery) All(ctx context.Context, exec boil.ContextExecutor) (NodesServiceSlice, error) {
	var o []*NodesService

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to NodesService slice")
	}

	if len(nodesServiceAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all NodesService records in the query.
func (q nodesServiceQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count nodes_services rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q nodesServiceQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if nodes_services exists")
	}

	return count > 0, nil
}

// NodesServices retrieves all the records using an executor.
func NodesServices(mods ...qm.QueryMod) nodesServiceQuery {
	mods = append(mods, qm.From("\"nodes_services\""))
	return nodesServiceQuery{NewQuery(mods...)}
}

// FindNodesService retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindNodesService(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*NodesService, error) {
	nodesServiceObj := &NodesService{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"nodes_services\" where \"id\"=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, nodesServiceObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from nodes_services")
	}

	return nodesServiceObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *NodesService) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no nodes_services provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(nodesServiceColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	nodesServiceInsertCacheMut.RLock()
	cache, cached := nodesServiceInsertCache[key]
	nodesServiceInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			nodesServiceAllColumns,
			nodesServiceColumnsWithDefault,
			nodesServiceColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(nodesServiceType, nodesServiceMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(nodesServiceType, nodesServiceMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"nodes_services\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"nodes_services\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT \"%s\" FROM \"nodes_services\" WHERE %s", strings.Join(returnColumns, "\",\""), strmangle.WhereClause("\"", "\"", 0, nodesServicePrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into nodes_services")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == nodesServiceMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for nodes_services")
	}

CacheNoHooks:
	if !cached {
		nodesServiceInsertCacheMut.Lock()
		nodesServiceInsertCache[key] = cache
		nodesServiceInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the NodesService.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *NodesService) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	nodesServiceUpdateCacheMut.RLock()
	cache, cached := nodesServiceUpdateCache[key]
	nodesServiceUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			nodesServiceAllColumns,
			nodesServicePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update nodes_services, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"nodes_services\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, nodesServicePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(nodesServiceType, nodesServiceMapping, append(wl, nodesServicePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update nodes_services row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for nodes_services")
	}

	if !cached {
		nodesServiceUpdateCacheMut.Lock()
		nodesServiceUpdateCache[key] = cache
		nodesServiceUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q nodesServiceQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for nodes_services")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for nodes_services")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o NodesServiceSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), nodesServicePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"nodes_services\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, nodesServicePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in nodesService slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all nodesService")
	}
	return rowsAff, nil
}

// Delete deletes a single NodesService record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *NodesService) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no NodesService provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), nodesServicePrimaryKeyMapping)
	sql := "DELETE FROM \"nodes_services\" WHERE \"id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from nodes_services")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for nodes_services")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q nodesServiceQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no nodesServiceQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from nodes_services")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for nodes_services")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o NodesServiceSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(nodesServiceBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), nodesServicePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"nodes_services\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, nodesServicePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from nodesService slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for nodes_services")
	}

	if len(nodesServiceAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *NodesService) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindNodesService(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *NodesServiceSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := NodesServiceSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), nodesServicePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"nodes_services\".* FROM \"nodes_services\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, nodesServicePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in NodesServiceSlice")
	}

	*o = slice

	return nil
}

// NodesServiceExists checks if the NodesService row exists.
func NodesServiceExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"nodes_services\" where \"id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if nodes_services exists")
	}

	return exists, nil
}
