// Code generated by SQLBoiler 3.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testScansNodes(t *testing.T) {
	t.Parallel()

	query := ScansNodes()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testScansNodesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ScansNode{}
	if err = randomize.Struct(seed, o, scansNodeDBTypes, true, scansNodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ScansNode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ScansNodes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testScansNodesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ScansNode{}
	if err = randomize.Struct(seed, o, scansNodeDBTypes, true, scansNodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ScansNode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := ScansNodes().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ScansNodes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testScansNodesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ScansNode{}
	if err = randomize.Struct(seed, o, scansNodeDBTypes, true, scansNodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ScansNode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ScansNodeSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ScansNodes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testScansNodesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ScansNode{}
	if err = randomize.Struct(seed, o, scansNodeDBTypes, true, scansNodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ScansNode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := ScansNodeExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if ScansNode exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ScansNodeExists to return true, but got false.")
	}
}

func testScansNodesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ScansNode{}
	if err = randomize.Struct(seed, o, scansNodeDBTypes, true, scansNodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ScansNode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	scansNodeFound, err := FindScansNode(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if scansNodeFound == nil {
		t.Error("want a record, got nil")
	}
}

func testScansNodesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ScansNode{}
	if err = randomize.Struct(seed, o, scansNodeDBTypes, true, scansNodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ScansNode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = ScansNodes().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testScansNodesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ScansNode{}
	if err = randomize.Struct(seed, o, scansNodeDBTypes, true, scansNodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ScansNode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := ScansNodes().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testScansNodesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	scansNodeOne := &ScansNode{}
	scansNodeTwo := &ScansNode{}
	if err = randomize.Struct(seed, scansNodeOne, scansNodeDBTypes, false, scansNodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ScansNode struct: %s", err)
	}
	if err = randomize.Struct(seed, scansNodeTwo, scansNodeDBTypes, false, scansNodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ScansNode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = scansNodeOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = scansNodeTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ScansNodes().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testScansNodesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	scansNodeOne := &ScansNode{}
	scansNodeTwo := &ScansNode{}
	if err = randomize.Struct(seed, scansNodeOne, scansNodeDBTypes, false, scansNodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ScansNode struct: %s", err)
	}
	if err = randomize.Struct(seed, scansNodeTwo, scansNodeDBTypes, false, scansNodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ScansNode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = scansNodeOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = scansNodeTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ScansNodes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func scansNodeBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *ScansNode) error {
	*o = ScansNode{}
	return nil
}

func scansNodeAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *ScansNode) error {
	*o = ScansNode{}
	return nil
}

func scansNodeAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *ScansNode) error {
	*o = ScansNode{}
	return nil
}

func scansNodeBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ScansNode) error {
	*o = ScansNode{}
	return nil
}

func scansNodeAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ScansNode) error {
	*o = ScansNode{}
	return nil
}

func scansNodeBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ScansNode) error {
	*o = ScansNode{}
	return nil
}

func scansNodeAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ScansNode) error {
	*o = ScansNode{}
	return nil
}

func scansNodeBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ScansNode) error {
	*o = ScansNode{}
	return nil
}

func scansNodeAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ScansNode) error {
	*o = ScansNode{}
	return nil
}

func testScansNodesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &ScansNode{}
	o := &ScansNode{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, scansNodeDBTypes, false); err != nil {
		t.Errorf("Unable to randomize ScansNode object: %s", err)
	}

	AddScansNodeHook(boil.BeforeInsertHook, scansNodeBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	scansNodeBeforeInsertHooks = []ScansNodeHook{}

	AddScansNodeHook(boil.AfterInsertHook, scansNodeAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	scansNodeAfterInsertHooks = []ScansNodeHook{}

	AddScansNodeHook(boil.AfterSelectHook, scansNodeAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	scansNodeAfterSelectHooks = []ScansNodeHook{}

	AddScansNodeHook(boil.BeforeUpdateHook, scansNodeBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	scansNodeBeforeUpdateHooks = []ScansNodeHook{}

	AddScansNodeHook(boil.AfterUpdateHook, scansNodeAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	scansNodeAfterUpdateHooks = []ScansNodeHook{}

	AddScansNodeHook(boil.BeforeDeleteHook, scansNodeBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	scansNodeBeforeDeleteHooks = []ScansNodeHook{}

	AddScansNodeHook(boil.AfterDeleteHook, scansNodeAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	scansNodeAfterDeleteHooks = []ScansNodeHook{}

	AddScansNodeHook(boil.BeforeUpsertHook, scansNodeBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	scansNodeBeforeUpsertHooks = []ScansNodeHook{}

	AddScansNodeHook(boil.AfterUpsertHook, scansNodeAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	scansNodeAfterUpsertHooks = []ScansNodeHook{}
}

func testScansNodesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ScansNode{}
	if err = randomize.Struct(seed, o, scansNodeDBTypes, true, scansNodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ScansNode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ScansNodes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testScansNodesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ScansNode{}
	if err = randomize.Struct(seed, o, scansNodeDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ScansNode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(scansNodeColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := ScansNodes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testScansNodesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ScansNode{}
	if err = randomize.Struct(seed, o, scansNodeDBTypes, true, scansNodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ScansNode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testScansNodesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ScansNode{}
	if err = randomize.Struct(seed, o, scansNodeDBTypes, true, scansNodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ScansNode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ScansNodeSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testScansNodesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ScansNode{}
	if err = randomize.Struct(seed, o, scansNodeDBTypes, true, scansNodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ScansNode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ScansNodes().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	scansNodeDBTypes = map[string]string{`ID`: `INTEGER`, `CreatedAt`: `DATE`, `NodeID`: `TEXT`, `ScanID`: `INTEGER`}
	_                = bytes.MinRead
)

func testScansNodesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(scansNodePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(scansNodeAllColumns) == len(scansNodePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ScansNode{}
	if err = randomize.Struct(seed, o, scansNodeDBTypes, true, scansNodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ScansNode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ScansNodes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, scansNodeDBTypes, true, scansNodePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ScansNode struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testScansNodesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(scansNodeAllColumns) == len(scansNodePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ScansNode{}
	if err = randomize.Struct(seed, o, scansNodeDBTypes, true, scansNodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ScansNode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ScansNodes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, scansNodeDBTypes, true, scansNodePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ScansNode struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(scansNodeAllColumns, scansNodePrimaryKeyColumns) {
		fields = scansNodeAllColumns
	} else {
		fields = strmangle.SetComplement(
			scansNodeAllColumns,
			scansNodePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := ScansNodeSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}
