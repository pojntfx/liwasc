// Code generated by SQLBoiler 3.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// NetworkScansNode is an object representing the database table.
type NetworkScansNode struct {
	ID            int64     `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreatedAt     time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	NodeID        string    `boil:"node_id" json:"node_id" toml:"node_id" yaml:"node_id"`
	NetworkScanID int64     `boil:"network_scan_id" json:"network_scan_id" toml:"network_scan_id" yaml:"network_scan_id"`

	R *networkScansNodeR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L networkScansNodeL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var NetworkScansNodeColumns = struct {
	ID            string
	CreatedAt     string
	NodeID        string
	NetworkScanID string
}{
	ID:            "id",
	CreatedAt:     "created_at",
	NodeID:        "node_id",
	NetworkScanID: "network_scan_id",
}

// Generated where

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}

var NetworkScansNodeWhere = struct {
	ID            whereHelperint64
	CreatedAt     whereHelpertime_Time
	NodeID        whereHelperstring
	NetworkScanID whereHelperint64
}{
	ID:            whereHelperint64{field: "\"network_scans_nodes\".\"id\""},
	CreatedAt:     whereHelpertime_Time{field: "\"network_scans_nodes\".\"created_at\""},
	NodeID:        whereHelperstring{field: "\"network_scans_nodes\".\"node_id\""},
	NetworkScanID: whereHelperint64{field: "\"network_scans_nodes\".\"network_scan_id\""},
}

// NetworkScansNodeRels is where relationship names are stored.
var NetworkScansNodeRels = struct {
}{}

// networkScansNodeR is where relationships are stored.
type networkScansNodeR struct {
}

// NewStruct creates a new relationship struct
func (*networkScansNodeR) NewStruct() *networkScansNodeR {
	return &networkScansNodeR{}
}

// networkScansNodeL is where Load methods for each relationship are stored.
type networkScansNodeL struct{}

var (
	networkScansNodeAllColumns            = []string{"id", "created_at", "node_id", "network_scan_id"}
	networkScansNodeColumnsWithoutDefault = []string{"created_at", "node_id", "network_scan_id"}
	networkScansNodeColumnsWithDefault    = []string{"id"}
	networkScansNodePrimaryKeyColumns     = []string{"id"}
)

type (
	// NetworkScansNodeSlice is an alias for a slice of pointers to NetworkScansNode.
	// This should generally be used opposed to []NetworkScansNode.
	NetworkScansNodeSlice []*NetworkScansNode
	// NetworkScansNodeHook is the signature for custom NetworkScansNode hook methods
	NetworkScansNodeHook func(context.Context, boil.ContextExecutor, *NetworkScansNode) error

	networkScansNodeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	networkScansNodeType                 = reflect.TypeOf(&NetworkScansNode{})
	networkScansNodeMapping              = queries.MakeStructMapping(networkScansNodeType)
	networkScansNodePrimaryKeyMapping, _ = queries.BindMapping(networkScansNodeType, networkScansNodeMapping, networkScansNodePrimaryKeyColumns)
	networkScansNodeInsertCacheMut       sync.RWMutex
	networkScansNodeInsertCache          = make(map[string]insertCache)
	networkScansNodeUpdateCacheMut       sync.RWMutex
	networkScansNodeUpdateCache          = make(map[string]updateCache)
	networkScansNodeUpsertCacheMut       sync.RWMutex
	networkScansNodeUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var networkScansNodeBeforeInsertHooks []NetworkScansNodeHook
var networkScansNodeBeforeUpdateHooks []NetworkScansNodeHook
var networkScansNodeBeforeDeleteHooks []NetworkScansNodeHook
var networkScansNodeBeforeUpsertHooks []NetworkScansNodeHook

var networkScansNodeAfterInsertHooks []NetworkScansNodeHook
var networkScansNodeAfterSelectHooks []NetworkScansNodeHook
var networkScansNodeAfterUpdateHooks []NetworkScansNodeHook
var networkScansNodeAfterDeleteHooks []NetworkScansNodeHook
var networkScansNodeAfterUpsertHooks []NetworkScansNodeHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *NetworkScansNode) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range networkScansNodeBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *NetworkScansNode) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range networkScansNodeBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *NetworkScansNode) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range networkScansNodeBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *NetworkScansNode) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range networkScansNodeBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *NetworkScansNode) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range networkScansNodeAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *NetworkScansNode) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range networkScansNodeAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *NetworkScansNode) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range networkScansNodeAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *NetworkScansNode) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range networkScansNodeAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *NetworkScansNode) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range networkScansNodeAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddNetworkScansNodeHook registers your hook function for all future operations.
func AddNetworkScansNodeHook(hookPoint boil.HookPoint, networkScansNodeHook NetworkScansNodeHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		networkScansNodeBeforeInsertHooks = append(networkScansNodeBeforeInsertHooks, networkScansNodeHook)
	case boil.BeforeUpdateHook:
		networkScansNodeBeforeUpdateHooks = append(networkScansNodeBeforeUpdateHooks, networkScansNodeHook)
	case boil.BeforeDeleteHook:
		networkScansNodeBeforeDeleteHooks = append(networkScansNodeBeforeDeleteHooks, networkScansNodeHook)
	case boil.BeforeUpsertHook:
		networkScansNodeBeforeUpsertHooks = append(networkScansNodeBeforeUpsertHooks, networkScansNodeHook)
	case boil.AfterInsertHook:
		networkScansNodeAfterInsertHooks = append(networkScansNodeAfterInsertHooks, networkScansNodeHook)
	case boil.AfterSelectHook:
		networkScansNodeAfterSelectHooks = append(networkScansNodeAfterSelectHooks, networkScansNodeHook)
	case boil.AfterUpdateHook:
		networkScansNodeAfterUpdateHooks = append(networkScansNodeAfterUpdateHooks, networkScansNodeHook)
	case boil.AfterDeleteHook:
		networkScansNodeAfterDeleteHooks = append(networkScansNodeAfterDeleteHooks, networkScansNodeHook)
	case boil.AfterUpsertHook:
		networkScansNodeAfterUpsertHooks = append(networkScansNodeAfterUpsertHooks, networkScansNodeHook)
	}
}

// One returns a single networkScansNode record from the query.
func (q networkScansNodeQuery) One(ctx context.Context, exec boil.ContextExecutor) (*NetworkScansNode, error) {
	o := &NetworkScansNode{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for network_scans_nodes")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all NetworkScansNode records from the query.
func (q networkScansNodeQuery) All(ctx context.Context, exec boil.ContextExecutor) (NetworkScansNodeSlice, error) {
	var o []*NetworkScansNode

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to NetworkScansNode slice")
	}

	if len(networkScansNodeAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all NetworkScansNode records in the query.
func (q networkScansNodeQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count network_scans_nodes rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q networkScansNodeQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if network_scans_nodes exists")
	}

	return count > 0, nil
}

// NetworkScansNodes retrieves all the records using an executor.
func NetworkScansNodes(mods ...qm.QueryMod) networkScansNodeQuery {
	mods = append(mods, qm.From("\"network_scans_nodes\""))
	return networkScansNodeQuery{NewQuery(mods...)}
}

// FindNetworkScansNode retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindNetworkScansNode(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*NetworkScansNode, error) {
	networkScansNodeObj := &NetworkScansNode{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"network_scans_nodes\" where \"id\"=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, networkScansNodeObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from network_scans_nodes")
	}

	return networkScansNodeObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *NetworkScansNode) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no network_scans_nodes provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(networkScansNodeColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	networkScansNodeInsertCacheMut.RLock()
	cache, cached := networkScansNodeInsertCache[key]
	networkScansNodeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			networkScansNodeAllColumns,
			networkScansNodeColumnsWithDefault,
			networkScansNodeColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(networkScansNodeType, networkScansNodeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(networkScansNodeType, networkScansNodeMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"network_scans_nodes\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"network_scans_nodes\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT \"%s\" FROM \"network_scans_nodes\" WHERE %s", strings.Join(returnColumns, "\",\""), strmangle.WhereClause("\"", "\"", 0, networkScansNodePrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into network_scans_nodes")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == networkScansNodeMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for network_scans_nodes")
	}

CacheNoHooks:
	if !cached {
		networkScansNodeInsertCacheMut.Lock()
		networkScansNodeInsertCache[key] = cache
		networkScansNodeInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the NetworkScansNode.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *NetworkScansNode) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	networkScansNodeUpdateCacheMut.RLock()
	cache, cached := networkScansNodeUpdateCache[key]
	networkScansNodeUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			networkScansNodeAllColumns,
			networkScansNodePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update network_scans_nodes, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"network_scans_nodes\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, networkScansNodePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(networkScansNodeType, networkScansNodeMapping, append(wl, networkScansNodePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update network_scans_nodes row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for network_scans_nodes")
	}

	if !cached {
		networkScansNodeUpdateCacheMut.Lock()
		networkScansNodeUpdateCache[key] = cache
		networkScansNodeUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q networkScansNodeQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for network_scans_nodes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for network_scans_nodes")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o NetworkScansNodeSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), networkScansNodePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"network_scans_nodes\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, networkScansNodePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in networkScansNode slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all networkScansNode")
	}
	return rowsAff, nil
}

// Delete deletes a single NetworkScansNode record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *NetworkScansNode) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no NetworkScansNode provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), networkScansNodePrimaryKeyMapping)
	sql := "DELETE FROM \"network_scans_nodes\" WHERE \"id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from network_scans_nodes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for network_scans_nodes")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q networkScansNodeQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no networkScansNodeQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from network_scans_nodes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for network_scans_nodes")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o NetworkScansNodeSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(networkScansNodeBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), networkScansNodePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"network_scans_nodes\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, networkScansNodePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from networkScansNode slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for network_scans_nodes")
	}

	if len(networkScansNodeAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *NetworkScansNode) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindNetworkScansNode(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *NetworkScansNodeSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := NetworkScansNodeSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), networkScansNodePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"network_scans_nodes\".* FROM \"network_scans_nodes\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, networkScansNodePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in NetworkScansNodeSlice")
	}

	*o = slice

	return nil
}

// NetworkScansNodeExists checks if the NetworkScansNode row exists.
func NetworkScansNodeExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"network_scans_nodes\" where \"id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if network_scans_nodes exists")
	}

	return exists, nil
}
