// Code generated by SQLBoiler 3.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testNodeScansServicesNodes(t *testing.T) {
	t.Parallel()

	query := NodeScansServicesNodes()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testNodeScansServicesNodesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NodeScansServicesNode{}
	if err = randomize.Struct(seed, o, nodeScansServicesNodeDBTypes, true, nodeScansServicesNodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NodeScansServicesNode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := NodeScansServicesNodes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testNodeScansServicesNodesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NodeScansServicesNode{}
	if err = randomize.Struct(seed, o, nodeScansServicesNodeDBTypes, true, nodeScansServicesNodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NodeScansServicesNode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := NodeScansServicesNodes().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := NodeScansServicesNodes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testNodeScansServicesNodesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NodeScansServicesNode{}
	if err = randomize.Struct(seed, o, nodeScansServicesNodeDBTypes, true, nodeScansServicesNodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NodeScansServicesNode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := NodeScansServicesNodeSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := NodeScansServicesNodes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testNodeScansServicesNodesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NodeScansServicesNode{}
	if err = randomize.Struct(seed, o, nodeScansServicesNodeDBTypes, true, nodeScansServicesNodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NodeScansServicesNode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := NodeScansServicesNodeExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if NodeScansServicesNode exists: %s", err)
	}
	if !e {
		t.Errorf("Expected NodeScansServicesNodeExists to return true, but got false.")
	}
}

func testNodeScansServicesNodesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NodeScansServicesNode{}
	if err = randomize.Struct(seed, o, nodeScansServicesNodeDBTypes, true, nodeScansServicesNodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NodeScansServicesNode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	nodeScansServicesNodeFound, err := FindNodeScansServicesNode(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if nodeScansServicesNodeFound == nil {
		t.Error("want a record, got nil")
	}
}

func testNodeScansServicesNodesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NodeScansServicesNode{}
	if err = randomize.Struct(seed, o, nodeScansServicesNodeDBTypes, true, nodeScansServicesNodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NodeScansServicesNode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = NodeScansServicesNodes().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testNodeScansServicesNodesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NodeScansServicesNode{}
	if err = randomize.Struct(seed, o, nodeScansServicesNodeDBTypes, true, nodeScansServicesNodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NodeScansServicesNode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := NodeScansServicesNodes().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testNodeScansServicesNodesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	nodeScansServicesNodeOne := &NodeScansServicesNode{}
	nodeScansServicesNodeTwo := &NodeScansServicesNode{}
	if err = randomize.Struct(seed, nodeScansServicesNodeOne, nodeScansServicesNodeDBTypes, false, nodeScansServicesNodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NodeScansServicesNode struct: %s", err)
	}
	if err = randomize.Struct(seed, nodeScansServicesNodeTwo, nodeScansServicesNodeDBTypes, false, nodeScansServicesNodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NodeScansServicesNode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = nodeScansServicesNodeOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = nodeScansServicesNodeTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := NodeScansServicesNodes().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testNodeScansServicesNodesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	nodeScansServicesNodeOne := &NodeScansServicesNode{}
	nodeScansServicesNodeTwo := &NodeScansServicesNode{}
	if err = randomize.Struct(seed, nodeScansServicesNodeOne, nodeScansServicesNodeDBTypes, false, nodeScansServicesNodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NodeScansServicesNode struct: %s", err)
	}
	if err = randomize.Struct(seed, nodeScansServicesNodeTwo, nodeScansServicesNodeDBTypes, false, nodeScansServicesNodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NodeScansServicesNode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = nodeScansServicesNodeOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = nodeScansServicesNodeTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := NodeScansServicesNodes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func nodeScansServicesNodeBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *NodeScansServicesNode) error {
	*o = NodeScansServicesNode{}
	return nil
}

func nodeScansServicesNodeAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *NodeScansServicesNode) error {
	*o = NodeScansServicesNode{}
	return nil
}

func nodeScansServicesNodeAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *NodeScansServicesNode) error {
	*o = NodeScansServicesNode{}
	return nil
}

func nodeScansServicesNodeBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *NodeScansServicesNode) error {
	*o = NodeScansServicesNode{}
	return nil
}

func nodeScansServicesNodeAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *NodeScansServicesNode) error {
	*o = NodeScansServicesNode{}
	return nil
}

func nodeScansServicesNodeBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *NodeScansServicesNode) error {
	*o = NodeScansServicesNode{}
	return nil
}

func nodeScansServicesNodeAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *NodeScansServicesNode) error {
	*o = NodeScansServicesNode{}
	return nil
}

func nodeScansServicesNodeBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *NodeScansServicesNode) error {
	*o = NodeScansServicesNode{}
	return nil
}

func nodeScansServicesNodeAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *NodeScansServicesNode) error {
	*o = NodeScansServicesNode{}
	return nil
}

func testNodeScansServicesNodesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &NodeScansServicesNode{}
	o := &NodeScansServicesNode{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, nodeScansServicesNodeDBTypes, false); err != nil {
		t.Errorf("Unable to randomize NodeScansServicesNode object: %s", err)
	}

	AddNodeScansServicesNodeHook(boil.BeforeInsertHook, nodeScansServicesNodeBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	nodeScansServicesNodeBeforeInsertHooks = []NodeScansServicesNodeHook{}

	AddNodeScansServicesNodeHook(boil.AfterInsertHook, nodeScansServicesNodeAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	nodeScansServicesNodeAfterInsertHooks = []NodeScansServicesNodeHook{}

	AddNodeScansServicesNodeHook(boil.AfterSelectHook, nodeScansServicesNodeAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	nodeScansServicesNodeAfterSelectHooks = []NodeScansServicesNodeHook{}

	AddNodeScansServicesNodeHook(boil.BeforeUpdateHook, nodeScansServicesNodeBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	nodeScansServicesNodeBeforeUpdateHooks = []NodeScansServicesNodeHook{}

	AddNodeScansServicesNodeHook(boil.AfterUpdateHook, nodeScansServicesNodeAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	nodeScansServicesNodeAfterUpdateHooks = []NodeScansServicesNodeHook{}

	AddNodeScansServicesNodeHook(boil.BeforeDeleteHook, nodeScansServicesNodeBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	nodeScansServicesNodeBeforeDeleteHooks = []NodeScansServicesNodeHook{}

	AddNodeScansServicesNodeHook(boil.AfterDeleteHook, nodeScansServicesNodeAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	nodeScansServicesNodeAfterDeleteHooks = []NodeScansServicesNodeHook{}

	AddNodeScansServicesNodeHook(boil.BeforeUpsertHook, nodeScansServicesNodeBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	nodeScansServicesNodeBeforeUpsertHooks = []NodeScansServicesNodeHook{}

	AddNodeScansServicesNodeHook(boil.AfterUpsertHook, nodeScansServicesNodeAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	nodeScansServicesNodeAfterUpsertHooks = []NodeScansServicesNodeHook{}
}

func testNodeScansServicesNodesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NodeScansServicesNode{}
	if err = randomize.Struct(seed, o, nodeScansServicesNodeDBTypes, true, nodeScansServicesNodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NodeScansServicesNode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := NodeScansServicesNodes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testNodeScansServicesNodesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NodeScansServicesNode{}
	if err = randomize.Struct(seed, o, nodeScansServicesNodeDBTypes, true); err != nil {
		t.Errorf("Unable to randomize NodeScansServicesNode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(nodeScansServicesNodeColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := NodeScansServicesNodes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testNodeScansServicesNodesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NodeScansServicesNode{}
	if err = randomize.Struct(seed, o, nodeScansServicesNodeDBTypes, true, nodeScansServicesNodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NodeScansServicesNode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testNodeScansServicesNodesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NodeScansServicesNode{}
	if err = randomize.Struct(seed, o, nodeScansServicesNodeDBTypes, true, nodeScansServicesNodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NodeScansServicesNode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := NodeScansServicesNodeSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testNodeScansServicesNodesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NodeScansServicesNode{}
	if err = randomize.Struct(seed, o, nodeScansServicesNodeDBTypes, true, nodeScansServicesNodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NodeScansServicesNode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := NodeScansServicesNodes().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	nodeScansServicesNodeDBTypes = map[string]string{`ID`: `INTEGER`, `CreatedAt`: `DATE`, `ServiceID`: `INTEGER`, `NodeID`: `TEXT`}
	_                            = bytes.MinRead
)

func testNodeScansServicesNodesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(nodeScansServicesNodePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(nodeScansServicesNodeAllColumns) == len(nodeScansServicesNodePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &NodeScansServicesNode{}
	if err = randomize.Struct(seed, o, nodeScansServicesNodeDBTypes, true, nodeScansServicesNodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NodeScansServicesNode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := NodeScansServicesNodes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, nodeScansServicesNodeDBTypes, true, nodeScansServicesNodePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize NodeScansServicesNode struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testNodeScansServicesNodesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(nodeScansServicesNodeAllColumns) == len(nodeScansServicesNodePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &NodeScansServicesNode{}
	if err = randomize.Struct(seed, o, nodeScansServicesNodeDBTypes, true, nodeScansServicesNodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NodeScansServicesNode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := NodeScansServicesNodes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, nodeScansServicesNodeDBTypes, true, nodeScansServicesNodePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize NodeScansServicesNode struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(nodeScansServicesNodeAllColumns, nodeScansServicesNodePrimaryKeyColumns) {
		fields = nodeScansServicesNodeAllColumns
	} else {
		fields = strmangle.SetComplement(
			nodeScansServicesNodeAllColumns,
			nodeScansServicesNodePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := NodeScansServicesNodeSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}
