// Code generated by SQLBoiler 3.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testNodeNodeScansNetworkScans(t *testing.T) {
	t.Parallel()

	query := NodeNodeScansNetworkScans()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testNodeNodeScansNetworkScansDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NodeNodeScansNetworkScan{}
	if err = randomize.Struct(seed, o, nodeNodeScansNetworkScanDBTypes, true, nodeNodeScansNetworkScanColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NodeNodeScansNetworkScan struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := NodeNodeScansNetworkScans().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testNodeNodeScansNetworkScansQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NodeNodeScansNetworkScan{}
	if err = randomize.Struct(seed, o, nodeNodeScansNetworkScanDBTypes, true, nodeNodeScansNetworkScanColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NodeNodeScansNetworkScan struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := NodeNodeScansNetworkScans().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := NodeNodeScansNetworkScans().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testNodeNodeScansNetworkScansSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NodeNodeScansNetworkScan{}
	if err = randomize.Struct(seed, o, nodeNodeScansNetworkScanDBTypes, true, nodeNodeScansNetworkScanColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NodeNodeScansNetworkScan struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := NodeNodeScansNetworkScanSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := NodeNodeScansNetworkScans().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testNodeNodeScansNetworkScansExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NodeNodeScansNetworkScan{}
	if err = randomize.Struct(seed, o, nodeNodeScansNetworkScanDBTypes, true, nodeNodeScansNetworkScanColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NodeNodeScansNetworkScan struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := NodeNodeScansNetworkScanExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if NodeNodeScansNetworkScan exists: %s", err)
	}
	if !e {
		t.Errorf("Expected NodeNodeScansNetworkScanExists to return true, but got false.")
	}
}

func testNodeNodeScansNetworkScansFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NodeNodeScansNetworkScan{}
	if err = randomize.Struct(seed, o, nodeNodeScansNetworkScanDBTypes, true, nodeNodeScansNetworkScanColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NodeNodeScansNetworkScan struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	nodeNodeScansNetworkScanFound, err := FindNodeNodeScansNetworkScan(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if nodeNodeScansNetworkScanFound == nil {
		t.Error("want a record, got nil")
	}
}

func testNodeNodeScansNetworkScansBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NodeNodeScansNetworkScan{}
	if err = randomize.Struct(seed, o, nodeNodeScansNetworkScanDBTypes, true, nodeNodeScansNetworkScanColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NodeNodeScansNetworkScan struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = NodeNodeScansNetworkScans().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testNodeNodeScansNetworkScansOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NodeNodeScansNetworkScan{}
	if err = randomize.Struct(seed, o, nodeNodeScansNetworkScanDBTypes, true, nodeNodeScansNetworkScanColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NodeNodeScansNetworkScan struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := NodeNodeScansNetworkScans().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testNodeNodeScansNetworkScansAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	nodeNodeScansNetworkScanOne := &NodeNodeScansNetworkScan{}
	nodeNodeScansNetworkScanTwo := &NodeNodeScansNetworkScan{}
	if err = randomize.Struct(seed, nodeNodeScansNetworkScanOne, nodeNodeScansNetworkScanDBTypes, false, nodeNodeScansNetworkScanColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NodeNodeScansNetworkScan struct: %s", err)
	}
	if err = randomize.Struct(seed, nodeNodeScansNetworkScanTwo, nodeNodeScansNetworkScanDBTypes, false, nodeNodeScansNetworkScanColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NodeNodeScansNetworkScan struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = nodeNodeScansNetworkScanOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = nodeNodeScansNetworkScanTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := NodeNodeScansNetworkScans().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testNodeNodeScansNetworkScansCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	nodeNodeScansNetworkScanOne := &NodeNodeScansNetworkScan{}
	nodeNodeScansNetworkScanTwo := &NodeNodeScansNetworkScan{}
	if err = randomize.Struct(seed, nodeNodeScansNetworkScanOne, nodeNodeScansNetworkScanDBTypes, false, nodeNodeScansNetworkScanColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NodeNodeScansNetworkScan struct: %s", err)
	}
	if err = randomize.Struct(seed, nodeNodeScansNetworkScanTwo, nodeNodeScansNetworkScanDBTypes, false, nodeNodeScansNetworkScanColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NodeNodeScansNetworkScan struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = nodeNodeScansNetworkScanOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = nodeNodeScansNetworkScanTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := NodeNodeScansNetworkScans().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func nodeNodeScansNetworkScanBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *NodeNodeScansNetworkScan) error {
	*o = NodeNodeScansNetworkScan{}
	return nil
}

func nodeNodeScansNetworkScanAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *NodeNodeScansNetworkScan) error {
	*o = NodeNodeScansNetworkScan{}
	return nil
}

func nodeNodeScansNetworkScanAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *NodeNodeScansNetworkScan) error {
	*o = NodeNodeScansNetworkScan{}
	return nil
}

func nodeNodeScansNetworkScanBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *NodeNodeScansNetworkScan) error {
	*o = NodeNodeScansNetworkScan{}
	return nil
}

func nodeNodeScansNetworkScanAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *NodeNodeScansNetworkScan) error {
	*o = NodeNodeScansNetworkScan{}
	return nil
}

func nodeNodeScansNetworkScanBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *NodeNodeScansNetworkScan) error {
	*o = NodeNodeScansNetworkScan{}
	return nil
}

func nodeNodeScansNetworkScanAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *NodeNodeScansNetworkScan) error {
	*o = NodeNodeScansNetworkScan{}
	return nil
}

func nodeNodeScansNetworkScanBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *NodeNodeScansNetworkScan) error {
	*o = NodeNodeScansNetworkScan{}
	return nil
}

func nodeNodeScansNetworkScanAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *NodeNodeScansNetworkScan) error {
	*o = NodeNodeScansNetworkScan{}
	return nil
}

func testNodeNodeScansNetworkScansHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &NodeNodeScansNetworkScan{}
	o := &NodeNodeScansNetworkScan{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, nodeNodeScansNetworkScanDBTypes, false); err != nil {
		t.Errorf("Unable to randomize NodeNodeScansNetworkScan object: %s", err)
	}

	AddNodeNodeScansNetworkScanHook(boil.BeforeInsertHook, nodeNodeScansNetworkScanBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	nodeNodeScansNetworkScanBeforeInsertHooks = []NodeNodeScansNetworkScanHook{}

	AddNodeNodeScansNetworkScanHook(boil.AfterInsertHook, nodeNodeScansNetworkScanAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	nodeNodeScansNetworkScanAfterInsertHooks = []NodeNodeScansNetworkScanHook{}

	AddNodeNodeScansNetworkScanHook(boil.AfterSelectHook, nodeNodeScansNetworkScanAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	nodeNodeScansNetworkScanAfterSelectHooks = []NodeNodeScansNetworkScanHook{}

	AddNodeNodeScansNetworkScanHook(boil.BeforeUpdateHook, nodeNodeScansNetworkScanBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	nodeNodeScansNetworkScanBeforeUpdateHooks = []NodeNodeScansNetworkScanHook{}

	AddNodeNodeScansNetworkScanHook(boil.AfterUpdateHook, nodeNodeScansNetworkScanAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	nodeNodeScansNetworkScanAfterUpdateHooks = []NodeNodeScansNetworkScanHook{}

	AddNodeNodeScansNetworkScanHook(boil.BeforeDeleteHook, nodeNodeScansNetworkScanBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	nodeNodeScansNetworkScanBeforeDeleteHooks = []NodeNodeScansNetworkScanHook{}

	AddNodeNodeScansNetworkScanHook(boil.AfterDeleteHook, nodeNodeScansNetworkScanAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	nodeNodeScansNetworkScanAfterDeleteHooks = []NodeNodeScansNetworkScanHook{}

	AddNodeNodeScansNetworkScanHook(boil.BeforeUpsertHook, nodeNodeScansNetworkScanBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	nodeNodeScansNetworkScanBeforeUpsertHooks = []NodeNodeScansNetworkScanHook{}

	AddNodeNodeScansNetworkScanHook(boil.AfterUpsertHook, nodeNodeScansNetworkScanAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	nodeNodeScansNetworkScanAfterUpsertHooks = []NodeNodeScansNetworkScanHook{}
}

func testNodeNodeScansNetworkScansInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NodeNodeScansNetworkScan{}
	if err = randomize.Struct(seed, o, nodeNodeScansNetworkScanDBTypes, true, nodeNodeScansNetworkScanColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NodeNodeScansNetworkScan struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := NodeNodeScansNetworkScans().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testNodeNodeScansNetworkScansInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NodeNodeScansNetworkScan{}
	if err = randomize.Struct(seed, o, nodeNodeScansNetworkScanDBTypes, true); err != nil {
		t.Errorf("Unable to randomize NodeNodeScansNetworkScan struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(nodeNodeScansNetworkScanColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := NodeNodeScansNetworkScans().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testNodeNodeScansNetworkScansReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NodeNodeScansNetworkScan{}
	if err = randomize.Struct(seed, o, nodeNodeScansNetworkScanDBTypes, true, nodeNodeScansNetworkScanColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NodeNodeScansNetworkScan struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testNodeNodeScansNetworkScansReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NodeNodeScansNetworkScan{}
	if err = randomize.Struct(seed, o, nodeNodeScansNetworkScanDBTypes, true, nodeNodeScansNetworkScanColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NodeNodeScansNetworkScan struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := NodeNodeScansNetworkScanSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testNodeNodeScansNetworkScansSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NodeNodeScansNetworkScan{}
	if err = randomize.Struct(seed, o, nodeNodeScansNetworkScanDBTypes, true, nodeNodeScansNetworkScanColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NodeNodeScansNetworkScan struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := NodeNodeScansNetworkScans().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	nodeNodeScansNetworkScanDBTypes = map[string]string{`ID`: `INTEGER`, `CreatedAt`: `DATE`, `NodeID`: `TEXT`, `NetworkScanID`: `INTEGER`, `NodeScanID`: `INTEGER`}
	_                               = bytes.MinRead
)

func testNodeNodeScansNetworkScansUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(nodeNodeScansNetworkScanPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(nodeNodeScansNetworkScanAllColumns) == len(nodeNodeScansNetworkScanPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &NodeNodeScansNetworkScan{}
	if err = randomize.Struct(seed, o, nodeNodeScansNetworkScanDBTypes, true, nodeNodeScansNetworkScanColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NodeNodeScansNetworkScan struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := NodeNodeScansNetworkScans().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, nodeNodeScansNetworkScanDBTypes, true, nodeNodeScansNetworkScanPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize NodeNodeScansNetworkScan struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testNodeNodeScansNetworkScansSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(nodeNodeScansNetworkScanAllColumns) == len(nodeNodeScansNetworkScanPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &NodeNodeScansNetworkScan{}
	if err = randomize.Struct(seed, o, nodeNodeScansNetworkScanDBTypes, true, nodeNodeScansNetworkScanColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NodeNodeScansNetworkScan struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := NodeNodeScansNetworkScans().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, nodeNodeScansNetworkScanDBTypes, true, nodeNodeScansNetworkScanPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize NodeNodeScansNetworkScan struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(nodeNodeScansNetworkScanAllColumns, nodeNodeScansNetworkScanPrimaryKeyColumns) {
		fields = nodeNodeScansNetworkScanAllColumns
	} else {
		fields = strmangle.SetComplement(
			nodeNodeScansNetworkScanAllColumns,
			nodeNodeScansNetworkScanPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := NodeNodeScansNetworkScanSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}
