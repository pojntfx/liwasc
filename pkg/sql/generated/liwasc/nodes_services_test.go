// Code generated by SQLBoiler 3.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testNodesServices(t *testing.T) {
	t.Parallel()

	query := NodesServices()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testNodesServicesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NodesService{}
	if err = randomize.Struct(seed, o, nodesServiceDBTypes, true, nodesServiceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NodesService struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := NodesServices().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testNodesServicesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NodesService{}
	if err = randomize.Struct(seed, o, nodesServiceDBTypes, true, nodesServiceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NodesService struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := NodesServices().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := NodesServices().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testNodesServicesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NodesService{}
	if err = randomize.Struct(seed, o, nodesServiceDBTypes, true, nodesServiceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NodesService struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := NodesServiceSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := NodesServices().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testNodesServicesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NodesService{}
	if err = randomize.Struct(seed, o, nodesServiceDBTypes, true, nodesServiceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NodesService struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := NodesServiceExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if NodesService exists: %s", err)
	}
	if !e {
		t.Errorf("Expected NodesServiceExists to return true, but got false.")
	}
}

func testNodesServicesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NodesService{}
	if err = randomize.Struct(seed, o, nodesServiceDBTypes, true, nodesServiceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NodesService struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	nodesServiceFound, err := FindNodesService(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if nodesServiceFound == nil {
		t.Error("want a record, got nil")
	}
}

func testNodesServicesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NodesService{}
	if err = randomize.Struct(seed, o, nodesServiceDBTypes, true, nodesServiceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NodesService struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = NodesServices().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testNodesServicesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NodesService{}
	if err = randomize.Struct(seed, o, nodesServiceDBTypes, true, nodesServiceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NodesService struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := NodesServices().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testNodesServicesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	nodesServiceOne := &NodesService{}
	nodesServiceTwo := &NodesService{}
	if err = randomize.Struct(seed, nodesServiceOne, nodesServiceDBTypes, false, nodesServiceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NodesService struct: %s", err)
	}
	if err = randomize.Struct(seed, nodesServiceTwo, nodesServiceDBTypes, false, nodesServiceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NodesService struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = nodesServiceOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = nodesServiceTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := NodesServices().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testNodesServicesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	nodesServiceOne := &NodesService{}
	nodesServiceTwo := &NodesService{}
	if err = randomize.Struct(seed, nodesServiceOne, nodesServiceDBTypes, false, nodesServiceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NodesService struct: %s", err)
	}
	if err = randomize.Struct(seed, nodesServiceTwo, nodesServiceDBTypes, false, nodesServiceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NodesService struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = nodesServiceOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = nodesServiceTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := NodesServices().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func nodesServiceBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *NodesService) error {
	*o = NodesService{}
	return nil
}

func nodesServiceAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *NodesService) error {
	*o = NodesService{}
	return nil
}

func nodesServiceAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *NodesService) error {
	*o = NodesService{}
	return nil
}

func nodesServiceBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *NodesService) error {
	*o = NodesService{}
	return nil
}

func nodesServiceAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *NodesService) error {
	*o = NodesService{}
	return nil
}

func nodesServiceBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *NodesService) error {
	*o = NodesService{}
	return nil
}

func nodesServiceAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *NodesService) error {
	*o = NodesService{}
	return nil
}

func nodesServiceBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *NodesService) error {
	*o = NodesService{}
	return nil
}

func nodesServiceAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *NodesService) error {
	*o = NodesService{}
	return nil
}

func testNodesServicesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &NodesService{}
	o := &NodesService{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, nodesServiceDBTypes, false); err != nil {
		t.Errorf("Unable to randomize NodesService object: %s", err)
	}

	AddNodesServiceHook(boil.BeforeInsertHook, nodesServiceBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	nodesServiceBeforeInsertHooks = []NodesServiceHook{}

	AddNodesServiceHook(boil.AfterInsertHook, nodesServiceAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	nodesServiceAfterInsertHooks = []NodesServiceHook{}

	AddNodesServiceHook(boil.AfterSelectHook, nodesServiceAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	nodesServiceAfterSelectHooks = []NodesServiceHook{}

	AddNodesServiceHook(boil.BeforeUpdateHook, nodesServiceBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	nodesServiceBeforeUpdateHooks = []NodesServiceHook{}

	AddNodesServiceHook(boil.AfterUpdateHook, nodesServiceAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	nodesServiceAfterUpdateHooks = []NodesServiceHook{}

	AddNodesServiceHook(boil.BeforeDeleteHook, nodesServiceBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	nodesServiceBeforeDeleteHooks = []NodesServiceHook{}

	AddNodesServiceHook(boil.AfterDeleteHook, nodesServiceAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	nodesServiceAfterDeleteHooks = []NodesServiceHook{}

	AddNodesServiceHook(boil.BeforeUpsertHook, nodesServiceBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	nodesServiceBeforeUpsertHooks = []NodesServiceHook{}

	AddNodesServiceHook(boil.AfterUpsertHook, nodesServiceAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	nodesServiceAfterUpsertHooks = []NodesServiceHook{}
}

func testNodesServicesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NodesService{}
	if err = randomize.Struct(seed, o, nodesServiceDBTypes, true, nodesServiceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NodesService struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := NodesServices().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testNodesServicesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NodesService{}
	if err = randomize.Struct(seed, o, nodesServiceDBTypes, true); err != nil {
		t.Errorf("Unable to randomize NodesService struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(nodesServiceColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := NodesServices().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testNodesServicesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NodesService{}
	if err = randomize.Struct(seed, o, nodesServiceDBTypes, true, nodesServiceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NodesService struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testNodesServicesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NodesService{}
	if err = randomize.Struct(seed, o, nodesServiceDBTypes, true, nodesServiceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NodesService struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := NodesServiceSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testNodesServicesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NodesService{}
	if err = randomize.Struct(seed, o, nodesServiceDBTypes, true, nodesServiceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NodesService struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := NodesServices().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	nodesServiceDBTypes = map[string]string{`ID`: `INTEGER`, `NodeID`: `TEXT`, `ServiceID`: `INTEGER`}
	_                   = bytes.MinRead
)

func testNodesServicesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(nodesServicePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(nodesServiceAllColumns) == len(nodesServicePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &NodesService{}
	if err = randomize.Struct(seed, o, nodesServiceDBTypes, true, nodesServiceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NodesService struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := NodesServices().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, nodesServiceDBTypes, true, nodesServicePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize NodesService struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testNodesServicesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(nodesServiceAllColumns) == len(nodesServicePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &NodesService{}
	if err = randomize.Struct(seed, o, nodesServiceDBTypes, true, nodesServiceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NodesService struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := NodesServices().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, nodesServiceDBTypes, true, nodesServicePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize NodesService struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(nodesServiceAllColumns, nodesServicePrimaryKeyColumns) {
		fields = nodesServiceAllColumns
	} else {
		fields = strmangle.SetComplement(
			nodesServiceAllColumns,
			nodesServicePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := NodesServiceSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}
