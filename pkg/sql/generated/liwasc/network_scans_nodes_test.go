// Code generated by SQLBoiler 3.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testNetworkScansNodes(t *testing.T) {
	t.Parallel()

	query := NetworkScansNodes()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testNetworkScansNodesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NetworkScansNode{}
	if err = randomize.Struct(seed, o, networkScansNodeDBTypes, true, networkScansNodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NetworkScansNode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := NetworkScansNodes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testNetworkScansNodesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NetworkScansNode{}
	if err = randomize.Struct(seed, o, networkScansNodeDBTypes, true, networkScansNodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NetworkScansNode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := NetworkScansNodes().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := NetworkScansNodes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testNetworkScansNodesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NetworkScansNode{}
	if err = randomize.Struct(seed, o, networkScansNodeDBTypes, true, networkScansNodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NetworkScansNode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := NetworkScansNodeSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := NetworkScansNodes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testNetworkScansNodesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NetworkScansNode{}
	if err = randomize.Struct(seed, o, networkScansNodeDBTypes, true, networkScansNodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NetworkScansNode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := NetworkScansNodeExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if NetworkScansNode exists: %s", err)
	}
	if !e {
		t.Errorf("Expected NetworkScansNodeExists to return true, but got false.")
	}
}

func testNetworkScansNodesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NetworkScansNode{}
	if err = randomize.Struct(seed, o, networkScansNodeDBTypes, true, networkScansNodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NetworkScansNode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	networkScansNodeFound, err := FindNetworkScansNode(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if networkScansNodeFound == nil {
		t.Error("want a record, got nil")
	}
}

func testNetworkScansNodesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NetworkScansNode{}
	if err = randomize.Struct(seed, o, networkScansNodeDBTypes, true, networkScansNodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NetworkScansNode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = NetworkScansNodes().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testNetworkScansNodesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NetworkScansNode{}
	if err = randomize.Struct(seed, o, networkScansNodeDBTypes, true, networkScansNodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NetworkScansNode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := NetworkScansNodes().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testNetworkScansNodesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	networkScansNodeOne := &NetworkScansNode{}
	networkScansNodeTwo := &NetworkScansNode{}
	if err = randomize.Struct(seed, networkScansNodeOne, networkScansNodeDBTypes, false, networkScansNodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NetworkScansNode struct: %s", err)
	}
	if err = randomize.Struct(seed, networkScansNodeTwo, networkScansNodeDBTypes, false, networkScansNodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NetworkScansNode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = networkScansNodeOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = networkScansNodeTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := NetworkScansNodes().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testNetworkScansNodesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	networkScansNodeOne := &NetworkScansNode{}
	networkScansNodeTwo := &NetworkScansNode{}
	if err = randomize.Struct(seed, networkScansNodeOne, networkScansNodeDBTypes, false, networkScansNodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NetworkScansNode struct: %s", err)
	}
	if err = randomize.Struct(seed, networkScansNodeTwo, networkScansNodeDBTypes, false, networkScansNodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NetworkScansNode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = networkScansNodeOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = networkScansNodeTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := NetworkScansNodes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func networkScansNodeBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *NetworkScansNode) error {
	*o = NetworkScansNode{}
	return nil
}

func networkScansNodeAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *NetworkScansNode) error {
	*o = NetworkScansNode{}
	return nil
}

func networkScansNodeAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *NetworkScansNode) error {
	*o = NetworkScansNode{}
	return nil
}

func networkScansNodeBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *NetworkScansNode) error {
	*o = NetworkScansNode{}
	return nil
}

func networkScansNodeAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *NetworkScansNode) error {
	*o = NetworkScansNode{}
	return nil
}

func networkScansNodeBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *NetworkScansNode) error {
	*o = NetworkScansNode{}
	return nil
}

func networkScansNodeAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *NetworkScansNode) error {
	*o = NetworkScansNode{}
	return nil
}

func networkScansNodeBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *NetworkScansNode) error {
	*o = NetworkScansNode{}
	return nil
}

func networkScansNodeAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *NetworkScansNode) error {
	*o = NetworkScansNode{}
	return nil
}

func testNetworkScansNodesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &NetworkScansNode{}
	o := &NetworkScansNode{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, networkScansNodeDBTypes, false); err != nil {
		t.Errorf("Unable to randomize NetworkScansNode object: %s", err)
	}

	AddNetworkScansNodeHook(boil.BeforeInsertHook, networkScansNodeBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	networkScansNodeBeforeInsertHooks = []NetworkScansNodeHook{}

	AddNetworkScansNodeHook(boil.AfterInsertHook, networkScansNodeAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	networkScansNodeAfterInsertHooks = []NetworkScansNodeHook{}

	AddNetworkScansNodeHook(boil.AfterSelectHook, networkScansNodeAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	networkScansNodeAfterSelectHooks = []NetworkScansNodeHook{}

	AddNetworkScansNodeHook(boil.BeforeUpdateHook, networkScansNodeBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	networkScansNodeBeforeUpdateHooks = []NetworkScansNodeHook{}

	AddNetworkScansNodeHook(boil.AfterUpdateHook, networkScansNodeAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	networkScansNodeAfterUpdateHooks = []NetworkScansNodeHook{}

	AddNetworkScansNodeHook(boil.BeforeDeleteHook, networkScansNodeBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	networkScansNodeBeforeDeleteHooks = []NetworkScansNodeHook{}

	AddNetworkScansNodeHook(boil.AfterDeleteHook, networkScansNodeAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	networkScansNodeAfterDeleteHooks = []NetworkScansNodeHook{}

	AddNetworkScansNodeHook(boil.BeforeUpsertHook, networkScansNodeBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	networkScansNodeBeforeUpsertHooks = []NetworkScansNodeHook{}

	AddNetworkScansNodeHook(boil.AfterUpsertHook, networkScansNodeAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	networkScansNodeAfterUpsertHooks = []NetworkScansNodeHook{}
}

func testNetworkScansNodesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NetworkScansNode{}
	if err = randomize.Struct(seed, o, networkScansNodeDBTypes, true, networkScansNodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NetworkScansNode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := NetworkScansNodes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testNetworkScansNodesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NetworkScansNode{}
	if err = randomize.Struct(seed, o, networkScansNodeDBTypes, true); err != nil {
		t.Errorf("Unable to randomize NetworkScansNode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(networkScansNodeColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := NetworkScansNodes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testNetworkScansNodesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NetworkScansNode{}
	if err = randomize.Struct(seed, o, networkScansNodeDBTypes, true, networkScansNodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NetworkScansNode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testNetworkScansNodesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NetworkScansNode{}
	if err = randomize.Struct(seed, o, networkScansNodeDBTypes, true, networkScansNodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NetworkScansNode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := NetworkScansNodeSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testNetworkScansNodesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NetworkScansNode{}
	if err = randomize.Struct(seed, o, networkScansNodeDBTypes, true, networkScansNodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NetworkScansNode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := NetworkScansNodes().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	networkScansNodeDBTypes = map[string]string{`ID`: `INTEGER`, `CreatedAt`: `DATE`, `NodeID`: `TEXT`, `NodeScanID`: `INTEGER`}
	_                       = bytes.MinRead
)

func testNetworkScansNodesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(networkScansNodePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(networkScansNodeAllColumns) == len(networkScansNodePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &NetworkScansNode{}
	if err = randomize.Struct(seed, o, networkScansNodeDBTypes, true, networkScansNodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NetworkScansNode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := NetworkScansNodes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, networkScansNodeDBTypes, true, networkScansNodePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize NetworkScansNode struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testNetworkScansNodesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(networkScansNodeAllColumns) == len(networkScansNodePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &NetworkScansNode{}
	if err = randomize.Struct(seed, o, networkScansNodeDBTypes, true, networkScansNodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NetworkScansNode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := NetworkScansNodes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, networkScansNodeDBTypes, true, networkScansNodePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize NetworkScansNode struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(networkScansNodeAllColumns, networkScansNodePrimaryKeyColumns) {
		fields = networkScansNodeAllColumns
	} else {
		fields = strmangle.SetComplement(
			networkScansNodeAllColumns,
			networkScansNodePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := NetworkScansNodeSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}
