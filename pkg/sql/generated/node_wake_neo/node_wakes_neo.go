// Code generated by SQLBoiler 3.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// NodeWakesNeo is an object representing the database table.
type NodeWakesNeo struct {
	ID         int64     `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreatedAt  time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	Done       int64     `boil:"done" json:"done" toml:"done" yaml:"done"`
	MacAddress string    `boil:"mac_address" json:"mac_address" toml:"mac_address" yaml:"mac_address"`
	PoweredOn  int64     `boil:"powered_on" json:"powered_on" toml:"powered_on" yaml:"powered_on"`

	R *nodeWakesNeoR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L nodeWakesNeoL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var NodeWakesNeoColumns = struct {
	ID         string
	CreatedAt  string
	Done       string
	MacAddress string
	PoweredOn  string
}{
	ID:         "id",
	CreatedAt:  "created_at",
	Done:       "done",
	MacAddress: "mac_address",
	PoweredOn:  "powered_on",
}

// Generated where

type whereHelperint64 struct{ field string }

func (w whereHelperint64) EQ(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint64) NEQ(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint64) LT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint64) LTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint64) GT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint64) GTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint64) IN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}

var NodeWakesNeoWhere = struct {
	ID         whereHelperint64
	CreatedAt  whereHelpertime_Time
	Done       whereHelperint64
	MacAddress whereHelperstring
	PoweredOn  whereHelperint64
}{
	ID:         whereHelperint64{field: "\"node_wakes_neo\".\"id\""},
	CreatedAt:  whereHelpertime_Time{field: "\"node_wakes_neo\".\"created_at\""},
	Done:       whereHelperint64{field: "\"node_wakes_neo\".\"done\""},
	MacAddress: whereHelperstring{field: "\"node_wakes_neo\".\"mac_address\""},
	PoweredOn:  whereHelperint64{field: "\"node_wakes_neo\".\"powered_on\""},
}

// NodeWakesNeoRels is where relationship names are stored.
var NodeWakesNeoRels = struct {
}{}

// nodeWakesNeoR is where relationships are stored.
type nodeWakesNeoR struct {
}

// NewStruct creates a new relationship struct
func (*nodeWakesNeoR) NewStruct() *nodeWakesNeoR {
	return &nodeWakesNeoR{}
}

// nodeWakesNeoL is where Load methods for each relationship are stored.
type nodeWakesNeoL struct{}

var (
	nodeWakesNeoAllColumns            = []string{"id", "created_at", "done", "mac_address", "powered_on"}
	nodeWakesNeoColumnsWithoutDefault = []string{"created_at", "done", "mac_address", "powered_on"}
	nodeWakesNeoColumnsWithDefault    = []string{"id"}
	nodeWakesNeoPrimaryKeyColumns     = []string{"id"}
)

type (
	// NodeWakesNeoSlice is an alias for a slice of pointers to NodeWakesNeo.
	// This should generally be used opposed to []NodeWakesNeo.
	NodeWakesNeoSlice []*NodeWakesNeo
	// NodeWakesNeoHook is the signature for custom NodeWakesNeo hook methods
	NodeWakesNeoHook func(context.Context, boil.ContextExecutor, *NodeWakesNeo) error

	nodeWakesNeoQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	nodeWakesNeoType                 = reflect.TypeOf(&NodeWakesNeo{})
	nodeWakesNeoMapping              = queries.MakeStructMapping(nodeWakesNeoType)
	nodeWakesNeoPrimaryKeyMapping, _ = queries.BindMapping(nodeWakesNeoType, nodeWakesNeoMapping, nodeWakesNeoPrimaryKeyColumns)
	nodeWakesNeoInsertCacheMut       sync.RWMutex
	nodeWakesNeoInsertCache          = make(map[string]insertCache)
	nodeWakesNeoUpdateCacheMut       sync.RWMutex
	nodeWakesNeoUpdateCache          = make(map[string]updateCache)
	nodeWakesNeoUpsertCacheMut       sync.RWMutex
	nodeWakesNeoUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var nodeWakesNeoBeforeInsertHooks []NodeWakesNeoHook
var nodeWakesNeoBeforeUpdateHooks []NodeWakesNeoHook
var nodeWakesNeoBeforeDeleteHooks []NodeWakesNeoHook
var nodeWakesNeoBeforeUpsertHooks []NodeWakesNeoHook

var nodeWakesNeoAfterInsertHooks []NodeWakesNeoHook
var nodeWakesNeoAfterSelectHooks []NodeWakesNeoHook
var nodeWakesNeoAfterUpdateHooks []NodeWakesNeoHook
var nodeWakesNeoAfterDeleteHooks []NodeWakesNeoHook
var nodeWakesNeoAfterUpsertHooks []NodeWakesNeoHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *NodeWakesNeo) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range nodeWakesNeoBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *NodeWakesNeo) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range nodeWakesNeoBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *NodeWakesNeo) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range nodeWakesNeoBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *NodeWakesNeo) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range nodeWakesNeoBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *NodeWakesNeo) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range nodeWakesNeoAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *NodeWakesNeo) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range nodeWakesNeoAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *NodeWakesNeo) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range nodeWakesNeoAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *NodeWakesNeo) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range nodeWakesNeoAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *NodeWakesNeo) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range nodeWakesNeoAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddNodeWakesNeoHook registers your hook function for all future operations.
func AddNodeWakesNeoHook(hookPoint boil.HookPoint, nodeWakesNeoHook NodeWakesNeoHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		nodeWakesNeoBeforeInsertHooks = append(nodeWakesNeoBeforeInsertHooks, nodeWakesNeoHook)
	case boil.BeforeUpdateHook:
		nodeWakesNeoBeforeUpdateHooks = append(nodeWakesNeoBeforeUpdateHooks, nodeWakesNeoHook)
	case boil.BeforeDeleteHook:
		nodeWakesNeoBeforeDeleteHooks = append(nodeWakesNeoBeforeDeleteHooks, nodeWakesNeoHook)
	case boil.BeforeUpsertHook:
		nodeWakesNeoBeforeUpsertHooks = append(nodeWakesNeoBeforeUpsertHooks, nodeWakesNeoHook)
	case boil.AfterInsertHook:
		nodeWakesNeoAfterInsertHooks = append(nodeWakesNeoAfterInsertHooks, nodeWakesNeoHook)
	case boil.AfterSelectHook:
		nodeWakesNeoAfterSelectHooks = append(nodeWakesNeoAfterSelectHooks, nodeWakesNeoHook)
	case boil.AfterUpdateHook:
		nodeWakesNeoAfterUpdateHooks = append(nodeWakesNeoAfterUpdateHooks, nodeWakesNeoHook)
	case boil.AfterDeleteHook:
		nodeWakesNeoAfterDeleteHooks = append(nodeWakesNeoAfterDeleteHooks, nodeWakesNeoHook)
	case boil.AfterUpsertHook:
		nodeWakesNeoAfterUpsertHooks = append(nodeWakesNeoAfterUpsertHooks, nodeWakesNeoHook)
	}
}

// One returns a single nodeWakesNeo record from the query.
func (q nodeWakesNeoQuery) One(ctx context.Context, exec boil.ContextExecutor) (*NodeWakesNeo, error) {
	o := &NodeWakesNeo{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for node_wakes_neo")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all NodeWakesNeo records from the query.
func (q nodeWakesNeoQuery) All(ctx context.Context, exec boil.ContextExecutor) (NodeWakesNeoSlice, error) {
	var o []*NodeWakesNeo

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to NodeWakesNeo slice")
	}

	if len(nodeWakesNeoAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all NodeWakesNeo records in the query.
func (q nodeWakesNeoQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count node_wakes_neo rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q nodeWakesNeoQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if node_wakes_neo exists")
	}

	return count > 0, nil
}

// NodeWakesNeos retrieves all the records using an executor.
func NodeWakesNeos(mods ...qm.QueryMod) nodeWakesNeoQuery {
	mods = append(mods, qm.From("\"node_wakes_neo\""))
	return nodeWakesNeoQuery{NewQuery(mods...)}
}

// FindNodeWakesNeo retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindNodeWakesNeo(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*NodeWakesNeo, error) {
	nodeWakesNeoObj := &NodeWakesNeo{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"node_wakes_neo\" where \"id\"=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, nodeWakesNeoObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from node_wakes_neo")
	}

	return nodeWakesNeoObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *NodeWakesNeo) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no node_wakes_neo provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(nodeWakesNeoColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	nodeWakesNeoInsertCacheMut.RLock()
	cache, cached := nodeWakesNeoInsertCache[key]
	nodeWakesNeoInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			nodeWakesNeoAllColumns,
			nodeWakesNeoColumnsWithDefault,
			nodeWakesNeoColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(nodeWakesNeoType, nodeWakesNeoMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(nodeWakesNeoType, nodeWakesNeoMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"node_wakes_neo\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"node_wakes_neo\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT \"%s\" FROM \"node_wakes_neo\" WHERE %s", strings.Join(returnColumns, "\",\""), strmangle.WhereClause("\"", "\"", 0, nodeWakesNeoPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into node_wakes_neo")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == nodeWakesNeoMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for node_wakes_neo")
	}

CacheNoHooks:
	if !cached {
		nodeWakesNeoInsertCacheMut.Lock()
		nodeWakesNeoInsertCache[key] = cache
		nodeWakesNeoInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the NodeWakesNeo.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *NodeWakesNeo) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	nodeWakesNeoUpdateCacheMut.RLock()
	cache, cached := nodeWakesNeoUpdateCache[key]
	nodeWakesNeoUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			nodeWakesNeoAllColumns,
			nodeWakesNeoPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update node_wakes_neo, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"node_wakes_neo\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, nodeWakesNeoPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(nodeWakesNeoType, nodeWakesNeoMapping, append(wl, nodeWakesNeoPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update node_wakes_neo row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for node_wakes_neo")
	}

	if !cached {
		nodeWakesNeoUpdateCacheMut.Lock()
		nodeWakesNeoUpdateCache[key] = cache
		nodeWakesNeoUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q nodeWakesNeoQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for node_wakes_neo")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for node_wakes_neo")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o NodeWakesNeoSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), nodeWakesNeoPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"node_wakes_neo\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, nodeWakesNeoPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in nodeWakesNeo slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all nodeWakesNeo")
	}
	return rowsAff, nil
}

// Delete deletes a single NodeWakesNeo record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *NodeWakesNeo) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no NodeWakesNeo provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), nodeWakesNeoPrimaryKeyMapping)
	sql := "DELETE FROM \"node_wakes_neo\" WHERE \"id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from node_wakes_neo")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for node_wakes_neo")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q nodeWakesNeoQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no nodeWakesNeoQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from node_wakes_neo")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for node_wakes_neo")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o NodeWakesNeoSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(nodeWakesNeoBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), nodeWakesNeoPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"node_wakes_neo\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, nodeWakesNeoPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from nodeWakesNeo slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for node_wakes_neo")
	}

	if len(nodeWakesNeoAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *NodeWakesNeo) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindNodeWakesNeo(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *NodeWakesNeoSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := NodeWakesNeoSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), nodeWakesNeoPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"node_wakes_neo\".* FROM \"node_wakes_neo\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, nodeWakesNeoPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in NodeWakesNeoSlice")
	}

	*o = slice

	return nil
}

// NodeWakesNeoExists checks if the NodeWakesNeo row exists.
func NodeWakesNeoExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"node_wakes_neo\" where \"id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if node_wakes_neo exists")
	}

	return exists, nil
}
