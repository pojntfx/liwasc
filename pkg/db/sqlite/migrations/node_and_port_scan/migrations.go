// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ../../db/sqlite/migrations/node_and_port_scan/1616878410007.sql

package node_and_port_scan


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataDbSqliteMigrationsNodeandportscan1616878410007Sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x93\xc1\x6a\xc3\x30\x0c\x86\xef\x79\x0a\x1d\x13\xb6\x3e\x41\xae\x7b\x85\x9d\x83\x6b\xa9\xc1\x2c\x96\x8c\xac\xb2\xf5\xed\x47\x12\xda\xba\x75\x3a\x36\x28\xbb\x19\xe9\xe7\xb7\xbe\x5f\x68\xb7\x83\x97\x18\x46\x75\x46\xf0\x9e\x1a\xaf\x34\xbf\xcc\xed\x27\x02\x16\xa4\x21\x7b\xc7\x19\xda\x06\x00\x20\x20\x04\x36\x1a\x49\x81\xc5\x80\x8f\xd3\x04\x49\x43\x74\x7a\x82\x0f\x3a\xbd\x2e\xa2\xd5\x02\x07\x67\x80\xb3\xd7\x59\xb9\x76\x51\x98\x2a\x93\xa6\xeb\xeb\x9f\x9f\xf8\x69\x74\x7e\x70\x88\x4a\x39\x83\xd1\x97\xdd\xb5\x43\xfa\xa9\x7b\x49\x61\xd8\x98\x64\x95\x1c\x44\x29\x8c\x3c\x8f\x03\x6d\xa9\xef\x40\xe9\x40\x4a\xec\x29\x17\x71\xb6\x01\xbb\x8a\x39\x89\xda\xbf\xa4\x5d\x60\xfd\x81\x68\x03\xe6\x31\xc7\x13\x11\x96\x58\xf8\x18\xf7\xa4\x0f\x66\x35\x75\x9c\x17\x59\x52\x31\xf1\x32\x6d\xad\xf1\x12\xef\x2f\xa1\x4b\xfd\x0d\xf9\x75\x4f\x67\xfc\xf2\x86\xde\xe4\x93\x1b\x54\x49\xd5\x0d\xf5\xf7\xe5\xdb\xca\xd5\xb6\x2a\xe7\xfe\x3b\x00\x00\xff\xff\xdf\x4f\xbe\xc5\xa6\x03\x00\x00")

func bindataDbSqliteMigrationsNodeandportscan1616878410007SqlBytes() ([]byte, error) {
	return bindataRead(
		_bindataDbSqliteMigrationsNodeandportscan1616878410007Sql,
		"../../db/sqlite/migrations/node_and_port_scan/1616878410007.sql",
	)
}



func bindataDbSqliteMigrationsNodeandportscan1616878410007Sql() (*asset, error) {
	bytes, err := bindataDbSqliteMigrationsNodeandportscan1616878410007SqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "../../db/sqlite/migrations/node_and_port_scan/1616878410007.sql",
		size: 934,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1617034594, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"../../db/sqlite/migrations/node_and_port_scan/1616878410007.sql": bindataDbSqliteMigrationsNodeandportscan1616878410007Sql,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"..": {Func: nil, Children: map[string]*bintree{
		"..": {Func: nil, Children: map[string]*bintree{
			"db": {Func: nil, Children: map[string]*bintree{
				"sqlite": {Func: nil, Children: map[string]*bintree{
					"migrations": {Func: nil, Children: map[string]*bintree{
						"node_and_port_scan": {Func: nil, Children: map[string]*bintree{
							"1616878410007.sql": {Func: bindataDbSqliteMigrationsNodeandportscan1616878410007Sql, Children: map[string]*bintree{}},
						}},
					}},
				}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
