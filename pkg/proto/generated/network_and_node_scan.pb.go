// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.13.0
// source: network_and_node_scan.proto

package proto

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type NetworkScanTriggerMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NetworkScanTimeout int64 `protobuf:"varint,1,opt,name=NetworkScanTimeout,proto3" json:"NetworkScanTimeout,omitempty"`
	NodeScanTimeout    int64 `protobuf:"varint,2,opt,name=NodeScanTimeout,proto3" json:"NodeScanTimeout,omitempty"` // Time in millisecond to wait for a response per port
}

func (x *NetworkScanTriggerMessage) Reset() {
	*x = NetworkScanTriggerMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_and_node_scan_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkScanTriggerMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkScanTriggerMessage) ProtoMessage() {}

func (x *NetworkScanTriggerMessage) ProtoReflect() protoreflect.Message {
	mi := &file_network_and_node_scan_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkScanTriggerMessage.ProtoReflect.Descriptor instead.
func (*NetworkScanTriggerMessage) Descriptor() ([]byte, []int) {
	return file_network_and_node_scan_proto_rawDescGZIP(), []int{0}
}

func (x *NetworkScanTriggerMessage) GetNetworkScanTimeout() int64 {
	if x != nil {
		return x.NetworkScanTimeout
	}
	return 0
}

func (x *NetworkScanTriggerMessage) GetNodeScanTimeout() int64 {
	if x != nil {
		return x.NodeScanTimeout
	}
	return 0
}

type NetworkScanReferenceMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NetworkScanID int64 `protobuf:"varint,1,opt,name=NetworkScanID,proto3" json:"NetworkScanID,omitempty"`
}

func (x *NetworkScanReferenceMessage) Reset() {
	*x = NetworkScanReferenceMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_and_node_scan_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkScanReferenceMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkScanReferenceMessage) ProtoMessage() {}

func (x *NetworkScanReferenceMessage) ProtoReflect() protoreflect.Message {
	mi := &file_network_and_node_scan_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkScanReferenceMessage.ProtoReflect.Descriptor instead.
func (*NetworkScanReferenceMessage) Descriptor() ([]byte, []int) {
	return file_network_and_node_scan_proto_rawDescGZIP(), []int{1}
}

func (x *NetworkScanReferenceMessage) GetNetworkScanID() int64 {
	if x != nil {
		return x.NetworkScanID
	}
	return 0
}

type NodeScanTriggerMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MACAddress string `protobuf:"bytes,1,opt,name=MACAddress,proto3" json:"MACAddress,omitempty"`
	Timeout    int64  `protobuf:"varint,2,opt,name=Timeout,proto3" json:"Timeout,omitempty"`
}

func (x *NodeScanTriggerMessage) Reset() {
	*x = NodeScanTriggerMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_and_node_scan_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeScanTriggerMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeScanTriggerMessage) ProtoMessage() {}

func (x *NodeScanTriggerMessage) ProtoReflect() protoreflect.Message {
	mi := &file_network_and_node_scan_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeScanTriggerMessage.ProtoReflect.Descriptor instead.
func (*NodeScanTriggerMessage) Descriptor() ([]byte, []int) {
	return file_network_and_node_scan_proto_rawDescGZIP(), []int{2}
}

func (x *NodeScanTriggerMessage) GetMACAddress() string {
	if x != nil {
		return x.MACAddress
	}
	return ""
}

func (x *NodeScanTriggerMessage) GetTimeout() int64 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

type NodeScanReferenceMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MACAddress string `protobuf:"bytes,1,opt,name=MACAddress,proto3" json:"MACAddress,omitempty"`
	NodeScanID int64  `protobuf:"varint,2,opt,name=NodeScanID,proto3" json:"NodeScanID,omitempty"`
}

func (x *NodeScanReferenceMessage) Reset() {
	*x = NodeScanReferenceMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_and_node_scan_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeScanReferenceMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeScanReferenceMessage) ProtoMessage() {}

func (x *NodeScanReferenceMessage) ProtoReflect() protoreflect.Message {
	mi := &file_network_and_node_scan_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeScanReferenceMessage.ProtoReflect.Descriptor instead.
func (*NodeScanReferenceMessage) Descriptor() ([]byte, []int) {
	return file_network_and_node_scan_proto_rawDescGZIP(), []int{3}
}

func (x *NodeScanReferenceMessage) GetMACAddress() string {
	if x != nil {
		return x.MACAddress
	}
	return ""
}

func (x *NodeScanReferenceMessage) GetNodeScanID() int64 {
	if x != nil {
		return x.NodeScanID
	}
	return 0
}

type DiscoveredNodeMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// NodeScanID is the ID of the running node scan to subscribe to
	NodeScanID int64 `protobuf:"varint,1,opt,name=NodeScanID,proto3" json:"NodeScanID,omitempty"` // If NodeScanID == -1 || LucidNodeMessage.PoweredOn ==
	// false, the node is not powered on.
	LucidNode *LucidNodeMessage `protobuf:"bytes,2,opt,name=LucidNode,proto3" json:"LucidNode,omitempty"`
}

func (x *DiscoveredNodeMessage) Reset() {
	*x = DiscoveredNodeMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_and_node_scan_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiscoveredNodeMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiscoveredNodeMessage) ProtoMessage() {}

func (x *DiscoveredNodeMessage) ProtoReflect() protoreflect.Message {
	mi := &file_network_and_node_scan_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiscoveredNodeMessage.ProtoReflect.Descriptor instead.
func (*DiscoveredNodeMessage) Descriptor() ([]byte, []int) {
	return file_network_and_node_scan_proto_rawDescGZIP(), []int{4}
}

func (x *DiscoveredNodeMessage) GetNodeScanID() int64 {
	if x != nil {
		return x.NodeScanID
	}
	return 0
}

func (x *DiscoveredNodeMessage) GetLucidNode() *LucidNodeMessage {
	if x != nil {
		return x.LucidNode
	}
	return nil
}

type DiscoveredServiceMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MACAddress              string `protobuf:"bytes,1,opt,name=MACAddress,proto3" json:"MACAddress,omitempty"`
	ServiceName             string `protobuf:"bytes,2,opt,name=ServiceName,proto3" json:"ServiceName,omitempty"`
	PortNumber              int64  `protobuf:"varint,3,opt,name=PortNumber,proto3" json:"PortNumber,omitempty"`
	TransportProtocol       string `protobuf:"bytes,4,opt,name=TransportProtocol,proto3" json:"TransportProtocol,omitempty"`
	Description             string `protobuf:"bytes,5,opt,name=Description,proto3" json:"Description,omitempty"`
	Assignee                string `protobuf:"bytes,6,opt,name=Assignee,proto3" json:"Assignee,omitempty"`
	Contact                 string `protobuf:"bytes,7,opt,name=Contact,proto3" json:"Contact,omitempty"`
	RegistrationDate        string `protobuf:"bytes,8,opt,name=RegistrationDate,proto3" json:"RegistrationDate,omitempty"`
	ModificationDate        string `protobuf:"bytes,9,opt,name=ModificationDate,proto3" json:"ModificationDate,omitempty"`
	Reference               string `protobuf:"bytes,10,opt,name=Reference,proto3" json:"Reference,omitempty"`
	ServiceCode             string `protobuf:"bytes,11,opt,name=ServiceCode,proto3" json:"ServiceCode,omitempty"`
	UnauthorizedUseReported string `protobuf:"bytes,12,opt,name=UnauthorizedUseReported,proto3" json:"UnauthorizedUseReported,omitempty"`
	AssignmentNotes         string `protobuf:"bytes,13,opt,name=AssignmentNotes,proto3" json:"AssignmentNotes,omitempty"`
}

func (x *DiscoveredServiceMessage) Reset() {
	*x = DiscoveredServiceMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_and_node_scan_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiscoveredServiceMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiscoveredServiceMessage) ProtoMessage() {}

func (x *DiscoveredServiceMessage) ProtoReflect() protoreflect.Message {
	mi := &file_network_and_node_scan_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiscoveredServiceMessage.ProtoReflect.Descriptor instead.
func (*DiscoveredServiceMessage) Descriptor() ([]byte, []int) {
	return file_network_and_node_scan_proto_rawDescGZIP(), []int{5}
}

func (x *DiscoveredServiceMessage) GetMACAddress() string {
	if x != nil {
		return x.MACAddress
	}
	return ""
}

func (x *DiscoveredServiceMessage) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *DiscoveredServiceMessage) GetPortNumber() int64 {
	if x != nil {
		return x.PortNumber
	}
	return 0
}

func (x *DiscoveredServiceMessage) GetTransportProtocol() string {
	if x != nil {
		return x.TransportProtocol
	}
	return ""
}

func (x *DiscoveredServiceMessage) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *DiscoveredServiceMessage) GetAssignee() string {
	if x != nil {
		return x.Assignee
	}
	return ""
}

func (x *DiscoveredServiceMessage) GetContact() string {
	if x != nil {
		return x.Contact
	}
	return ""
}

func (x *DiscoveredServiceMessage) GetRegistrationDate() string {
	if x != nil {
		return x.RegistrationDate
	}
	return ""
}

func (x *DiscoveredServiceMessage) GetModificationDate() string {
	if x != nil {
		return x.ModificationDate
	}
	return ""
}

func (x *DiscoveredServiceMessage) GetReference() string {
	if x != nil {
		return x.Reference
	}
	return ""
}

func (x *DiscoveredServiceMessage) GetServiceCode() string {
	if x != nil {
		return x.ServiceCode
	}
	return ""
}

func (x *DiscoveredServiceMessage) GetUnauthorizedUseReported() string {
	if x != nil {
		return x.UnauthorizedUseReported
	}
	return ""
}

func (x *DiscoveredServiceMessage) GetAssignmentNotes() string {
	if x != nil {
		return x.AssignmentNotes
	}
	return ""
}

type NodeDeleteMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MACAddress string `protobuf:"bytes,1,opt,name=MACAddress,proto3" json:"MACAddress,omitempty"`
}

func (x *NodeDeleteMessage) Reset() {
	*x = NodeDeleteMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_and_node_scan_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeDeleteMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeDeleteMessage) ProtoMessage() {}

func (x *NodeDeleteMessage) ProtoReflect() protoreflect.Message {
	mi := &file_network_and_node_scan_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeDeleteMessage.ProtoReflect.Descriptor instead.
func (*NodeDeleteMessage) Descriptor() ([]byte, []int) {
	return file_network_and_node_scan_proto_rawDescGZIP(), []int{6}
}

func (x *NodeDeleteMessage) GetMACAddress() string {
	if x != nil {
		return x.MACAddress
	}
	return ""
}

var File_network_and_node_scan_proto protoreflect.FileDescriptor

var file_network_and_node_scan_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x6e, 0x6f,
	0x64, 0x65, 0x5f, 0x73, 0x63, 0x61, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1a, 0x63,
	0x6f, 0x6d, 0x2e, 0x70, 0x6f, 0x6a, 0x74, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x2e, 0x66, 0x65, 0x6c,
	0x69, 0x78, 0x2e, 0x6c, 0x69, 0x77, 0x61, 0x73, 0x63, 0x1a, 0x0f, 0x6e, 0x6f, 0x64, 0x65, 0x5f,
	0x77, 0x61, 0x6b, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x75, 0x0a, 0x19, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x63, 0x61, 0x6e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x53, 0x63, 0x61, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x12, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x63, 0x61, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x4e, 0x6f, 0x64, 0x65, 0x53,
	0x63, 0x61, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0f, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x22, 0x43, 0x0a, 0x1b, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x63, 0x61, 0x6e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x24, 0x0a, 0x0d, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x63, 0x61, 0x6e, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x53, 0x63, 0x61, 0x6e, 0x49, 0x44, 0x22, 0x52, 0x0a, 0x16, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x63,
	0x61, 0x6e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x4d, 0x41, 0x43, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4d, 0x41, 0x43, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x22, 0x5a, 0x0a, 0x18, 0x4e, 0x6f,
	0x64, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x4d, 0x41, 0x43, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4d, 0x41, 0x43, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x63,
	0x61, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x4e, 0x6f, 0x64, 0x65,
	0x53, 0x63, 0x61, 0x6e, 0x49, 0x44, 0x22, 0x83, 0x01, 0x0a, 0x15, 0x44, 0x69, 0x73, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x49, 0x44,
	0x12, 0x4a, 0x0a, 0x09, 0x4c, 0x75, 0x63, 0x69, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x6f, 0x6a, 0x74, 0x69, 0x6e,
	0x67, 0x65, 0x72, 0x2e, 0x66, 0x65, 0x6c, 0x69, 0x78, 0x2e, 0x6c, 0x69, 0x77, 0x61, 0x73, 0x63,
	0x2e, 0x4c, 0x75, 0x63, 0x69, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x09, 0x4c, 0x75, 0x63, 0x69, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x22, 0xfe, 0x03, 0x0a,
	0x18, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x4d, 0x41, 0x43,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4d,
	0x41, 0x43, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x50,
	0x6f, 0x72, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x50, 0x6f, 0x72, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x11, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72,
	0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x41,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x41,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x12, 0x2a, 0x0a, 0x10, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a,
	0x10, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x38, 0x0a, 0x17, 0x55, 0x6e, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x55, 0x73, 0x65, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x55, 0x6e, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x55, 0x73, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x41, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x22, 0x33, 0x0a,
	0x11, 0x4e, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x4d, 0x41, 0x43, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4d, 0x41, 0x43, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x32, 0x9d, 0x05, 0x0a, 0x19, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x41, 0x6e,
	0x64, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x84, 0x01, 0x0a, 0x12, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x53, 0x63, 0x61, 0x6e, 0x12, 0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x6f,
	0x6a, 0x74, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x2e, 0x66, 0x65, 0x6c, 0x69, 0x78, 0x2e, 0x6c, 0x69,
	0x77, 0x61, 0x73, 0x63, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x63, 0x61, 0x6e,
	0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x37,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x6f, 0x6a, 0x74, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x2e, 0x66,
	0x65, 0x6c, 0x69, 0x78, 0x2e, 0x6c, 0x69, 0x77, 0x61, 0x73, 0x63, 0x2e, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x53, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x7b, 0x0a, 0x0f, 0x54, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x12, 0x32, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x70, 0x6f, 0x6a, 0x74, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x2e, 0x66, 0x65, 0x6c, 0x69, 0x78,
	0x2e, 0x6c, 0x69, 0x77, 0x61, 0x73, 0x63, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x63, 0x61, 0x6e,
	0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x34,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x6f, 0x6a, 0x74, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x2e, 0x66,
	0x65, 0x6c, 0x69, 0x78, 0x2e, 0x6c, 0x69, 0x77, 0x61, 0x73, 0x63, 0x2e, 0x4e, 0x6f, 0x64, 0x65,
	0x53, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x83, 0x01, 0x0a, 0x13, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x54, 0x6f, 0x4e, 0x65, 0x77, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x37, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x70, 0x6f, 0x6a, 0x74, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x2e, 0x66, 0x65, 0x6c,
	0x69, 0x78, 0x2e, 0x6c, 0x69, 0x77, 0x61, 0x73, 0x63, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x53, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x6f, 0x6a, 0x74,
	0x69, 0x6e, 0x67, 0x65, 0x72, 0x2e, 0x66, 0x65, 0x6c, 0x69, 0x78, 0x2e, 0x6c, 0x69, 0x77, 0x61,
	0x73, 0x63, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x64, 0x4e, 0x6f, 0x64,
	0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x30, 0x01, 0x12, 0x8a, 0x01, 0x0a, 0x1a, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x6f, 0x4e, 0x65, 0x77, 0x4f, 0x70, 0x65,
	0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x34, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x70, 0x6f, 0x6a, 0x74, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x2e, 0x66, 0x65, 0x6c, 0x69, 0x78, 0x2e,
	0x6c, 0x69, 0x77, 0x61, 0x73, 0x63, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a,
	0x34, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x6f, 0x6a, 0x74, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x2e,
	0x66, 0x65, 0x6c, 0x69, 0x78, 0x2e, 0x6c, 0x69, 0x77, 0x61, 0x73, 0x63, 0x2e, 0x44, 0x69, 0x73,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x30, 0x01, 0x12, 0x69, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x2d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x6f, 0x6a, 0x74,
	0x69, 0x6e, 0x67, 0x65, 0x72, 0x2e, 0x66, 0x65, 0x6c, 0x69, 0x78, 0x2e, 0x6c, 0x69, 0x77, 0x61,
	0x73, 0x63, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x1a, 0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x6f, 0x6a, 0x74, 0x69,
	0x6e, 0x67, 0x65, 0x72, 0x2e, 0x66, 0x65, 0x6c, 0x69, 0x78, 0x2e, 0x6c, 0x69, 0x77, 0x61, 0x73,
	0x63, 0x2e, 0x4c, 0x75, 0x63, 0x69, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x42, 0x25, 0x5a, 0x23, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x70, 0x6f, 0x6a, 0x6e, 0x74, 0x66, 0x78, 0x2f, 0x6c, 0x69, 0x77, 0x61, 0x73, 0x63, 0x2f,
	0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_network_and_node_scan_proto_rawDescOnce sync.Once
	file_network_and_node_scan_proto_rawDescData = file_network_and_node_scan_proto_rawDesc
)

func file_network_and_node_scan_proto_rawDescGZIP() []byte {
	file_network_and_node_scan_proto_rawDescOnce.Do(func() {
		file_network_and_node_scan_proto_rawDescData = protoimpl.X.CompressGZIP(file_network_and_node_scan_proto_rawDescData)
	})
	return file_network_and_node_scan_proto_rawDescData
}

var file_network_and_node_scan_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_network_and_node_scan_proto_goTypes = []interface{}{
	(*NetworkScanTriggerMessage)(nil),   // 0: com.pojtinger.felix.liwasc.NetworkScanTriggerMessage
	(*NetworkScanReferenceMessage)(nil), // 1: com.pojtinger.felix.liwasc.NetworkScanReferenceMessage
	(*NodeScanTriggerMessage)(nil),      // 2: com.pojtinger.felix.liwasc.NodeScanTriggerMessage
	(*NodeScanReferenceMessage)(nil),    // 3: com.pojtinger.felix.liwasc.NodeScanReferenceMessage
	(*DiscoveredNodeMessage)(nil),       // 4: com.pojtinger.felix.liwasc.DiscoveredNodeMessage
	(*DiscoveredServiceMessage)(nil),    // 5: com.pojtinger.felix.liwasc.DiscoveredServiceMessage
	(*NodeDeleteMessage)(nil),           // 6: com.pojtinger.felix.liwasc.NodeDeleteMessage
	(*LucidNodeMessage)(nil),            // 7: com.pojtinger.felix.liwasc.LucidNodeMessage
}
var file_network_and_node_scan_proto_depIdxs = []int32{
	7, // 0: com.pojtinger.felix.liwasc.DiscoveredNodeMessage.LucidNode:type_name -> com.pojtinger.felix.liwasc.LucidNodeMessage
	0, // 1: com.pojtinger.felix.liwasc.NetworkAndNodeScanService.TriggerNetworkScan:input_type -> com.pojtinger.felix.liwasc.NetworkScanTriggerMessage
	2, // 2: com.pojtinger.felix.liwasc.NetworkAndNodeScanService.TriggerNodeScan:input_type -> com.pojtinger.felix.liwasc.NodeScanTriggerMessage
	1, // 3: com.pojtinger.felix.liwasc.NetworkAndNodeScanService.SubscribeToNewNodes:input_type -> com.pojtinger.felix.liwasc.NetworkScanReferenceMessage
	3, // 4: com.pojtinger.felix.liwasc.NetworkAndNodeScanService.SubscribeToNewOpenServices:input_type -> com.pojtinger.felix.liwasc.NodeScanReferenceMessage
	6, // 5: com.pojtinger.felix.liwasc.NetworkAndNodeScanService.DeleteNode:input_type -> com.pojtinger.felix.liwasc.NodeDeleteMessage
	1, // 6: com.pojtinger.felix.liwasc.NetworkAndNodeScanService.TriggerNetworkScan:output_type -> com.pojtinger.felix.liwasc.NetworkScanReferenceMessage
	3, // 7: com.pojtinger.felix.liwasc.NetworkAndNodeScanService.TriggerNodeScan:output_type -> com.pojtinger.felix.liwasc.NodeScanReferenceMessage
	4, // 8: com.pojtinger.felix.liwasc.NetworkAndNodeScanService.SubscribeToNewNodes:output_type -> com.pojtinger.felix.liwasc.DiscoveredNodeMessage
	5, // 9: com.pojtinger.felix.liwasc.NetworkAndNodeScanService.SubscribeToNewOpenServices:output_type -> com.pojtinger.felix.liwasc.DiscoveredServiceMessage
	7, // 10: com.pojtinger.felix.liwasc.NetworkAndNodeScanService.DeleteNode:output_type -> com.pojtinger.felix.liwasc.LucidNodeMessage
	6, // [6:11] is the sub-list for method output_type
	1, // [1:6] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_network_and_node_scan_proto_init() }
func file_network_and_node_scan_proto_init() {
	if File_network_and_node_scan_proto != nil {
		return
	}
	file_node_wake_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_network_and_node_scan_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkScanTriggerMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_and_node_scan_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkScanReferenceMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_and_node_scan_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeScanTriggerMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_and_node_scan_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeScanReferenceMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_and_node_scan_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiscoveredNodeMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_and_node_scan_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiscoveredServiceMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_and_node_scan_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeDeleteMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_network_and_node_scan_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_network_and_node_scan_proto_goTypes,
		DependencyIndexes: file_network_and_node_scan_proto_depIdxs,
		MessageInfos:      file_network_and_node_scan_proto_msgTypes,
	}.Build()
	File_network_and_node_scan_proto = out.File
	file_network_and_node_scan_proto_rawDesc = nil
	file_network_and_node_scan_proto_goTypes = nil
	file_network_and_node_scan_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// NetworkAndNodeScanServiceClient is the client API for NetworkAndNodeScanService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NetworkAndNodeScanServiceClient interface {
	TriggerNetworkScan(ctx context.Context, in *NetworkScanTriggerMessage, opts ...grpc.CallOption) (*NetworkScanReferenceMessage, error)
	TriggerNodeScan(ctx context.Context, in *NodeScanTriggerMessage, opts ...grpc.CallOption) (*NodeScanReferenceMessage, error)
	// Use -1 as NetworkScanID to return the latest finished scan
	SubscribeToNewNodes(ctx context.Context, in *NetworkScanReferenceMessage, opts ...grpc.CallOption) (NetworkAndNodeScanService_SubscribeToNewNodesClient, error)
	// Use -1 as NodeScanID and a valid MAC address to return the latest scan for
	// the MAC Address
	// Use a valid NodeScanID and "" as a MAC address to return
	// the matching scan
	SubscribeToNewOpenServices(ctx context.Context, in *NodeScanReferenceMessage, opts ...grpc.CallOption) (NetworkAndNodeScanService_SubscribeToNewOpenServicesClient, error)
	DeleteNode(ctx context.Context, in *NodeDeleteMessage, opts ...grpc.CallOption) (*LucidNodeMessage, error)
}

type networkAndNodeScanServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNetworkAndNodeScanServiceClient(cc grpc.ClientConnInterface) NetworkAndNodeScanServiceClient {
	return &networkAndNodeScanServiceClient{cc}
}

func (c *networkAndNodeScanServiceClient) TriggerNetworkScan(ctx context.Context, in *NetworkScanTriggerMessage, opts ...grpc.CallOption) (*NetworkScanReferenceMessage, error) {
	out := new(NetworkScanReferenceMessage)
	err := c.cc.Invoke(ctx, "/com.pojtinger.felix.liwasc.NetworkAndNodeScanService/TriggerNetworkScan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkAndNodeScanServiceClient) TriggerNodeScan(ctx context.Context, in *NodeScanTriggerMessage, opts ...grpc.CallOption) (*NodeScanReferenceMessage, error) {
	out := new(NodeScanReferenceMessage)
	err := c.cc.Invoke(ctx, "/com.pojtinger.felix.liwasc.NetworkAndNodeScanService/TriggerNodeScan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkAndNodeScanServiceClient) SubscribeToNewNodes(ctx context.Context, in *NetworkScanReferenceMessage, opts ...grpc.CallOption) (NetworkAndNodeScanService_SubscribeToNewNodesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_NetworkAndNodeScanService_serviceDesc.Streams[0], "/com.pojtinger.felix.liwasc.NetworkAndNodeScanService/SubscribeToNewNodes", opts...)
	if err != nil {
		return nil, err
	}
	x := &networkAndNodeScanServiceSubscribeToNewNodesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NetworkAndNodeScanService_SubscribeToNewNodesClient interface {
	Recv() (*DiscoveredNodeMessage, error)
	grpc.ClientStream
}

type networkAndNodeScanServiceSubscribeToNewNodesClient struct {
	grpc.ClientStream
}

func (x *networkAndNodeScanServiceSubscribeToNewNodesClient) Recv() (*DiscoveredNodeMessage, error) {
	m := new(DiscoveredNodeMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *networkAndNodeScanServiceClient) SubscribeToNewOpenServices(ctx context.Context, in *NodeScanReferenceMessage, opts ...grpc.CallOption) (NetworkAndNodeScanService_SubscribeToNewOpenServicesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_NetworkAndNodeScanService_serviceDesc.Streams[1], "/com.pojtinger.felix.liwasc.NetworkAndNodeScanService/SubscribeToNewOpenServices", opts...)
	if err != nil {
		return nil, err
	}
	x := &networkAndNodeScanServiceSubscribeToNewOpenServicesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NetworkAndNodeScanService_SubscribeToNewOpenServicesClient interface {
	Recv() (*DiscoveredServiceMessage, error)
	grpc.ClientStream
}

type networkAndNodeScanServiceSubscribeToNewOpenServicesClient struct {
	grpc.ClientStream
}

func (x *networkAndNodeScanServiceSubscribeToNewOpenServicesClient) Recv() (*DiscoveredServiceMessage, error) {
	m := new(DiscoveredServiceMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *networkAndNodeScanServiceClient) DeleteNode(ctx context.Context, in *NodeDeleteMessage, opts ...grpc.CallOption) (*LucidNodeMessage, error) {
	out := new(LucidNodeMessage)
	err := c.cc.Invoke(ctx, "/com.pojtinger.felix.liwasc.NetworkAndNodeScanService/DeleteNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NetworkAndNodeScanServiceServer is the server API for NetworkAndNodeScanService service.
type NetworkAndNodeScanServiceServer interface {
	TriggerNetworkScan(context.Context, *NetworkScanTriggerMessage) (*NetworkScanReferenceMessage, error)
	TriggerNodeScan(context.Context, *NodeScanTriggerMessage) (*NodeScanReferenceMessage, error)
	// Use -1 as NetworkScanID to return the latest finished scan
	SubscribeToNewNodes(*NetworkScanReferenceMessage, NetworkAndNodeScanService_SubscribeToNewNodesServer) error
	// Use -1 as NodeScanID and a valid MAC address to return the latest scan for
	// the MAC Address
	// Use a valid NodeScanID and "" as a MAC address to return
	// the matching scan
	SubscribeToNewOpenServices(*NodeScanReferenceMessage, NetworkAndNodeScanService_SubscribeToNewOpenServicesServer) error
	DeleteNode(context.Context, *NodeDeleteMessage) (*LucidNodeMessage, error)
}

// UnimplementedNetworkAndNodeScanServiceServer can be embedded to have forward compatible implementations.
type UnimplementedNetworkAndNodeScanServiceServer struct {
}

func (*UnimplementedNetworkAndNodeScanServiceServer) TriggerNetworkScan(context.Context, *NetworkScanTriggerMessage) (*NetworkScanReferenceMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TriggerNetworkScan not implemented")
}
func (*UnimplementedNetworkAndNodeScanServiceServer) TriggerNodeScan(context.Context, *NodeScanTriggerMessage) (*NodeScanReferenceMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TriggerNodeScan not implemented")
}
func (*UnimplementedNetworkAndNodeScanServiceServer) SubscribeToNewNodes(*NetworkScanReferenceMessage, NetworkAndNodeScanService_SubscribeToNewNodesServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeToNewNodes not implemented")
}
func (*UnimplementedNetworkAndNodeScanServiceServer) SubscribeToNewOpenServices(*NodeScanReferenceMessage, NetworkAndNodeScanService_SubscribeToNewOpenServicesServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeToNewOpenServices not implemented")
}
func (*UnimplementedNetworkAndNodeScanServiceServer) DeleteNode(context.Context, *NodeDeleteMessage) (*LucidNodeMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNode not implemented")
}

func RegisterNetworkAndNodeScanServiceServer(s *grpc.Server, srv NetworkAndNodeScanServiceServer) {
	s.RegisterService(&_NetworkAndNodeScanService_serviceDesc, srv)
}

func _NetworkAndNodeScanService_TriggerNetworkScan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetworkScanTriggerMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkAndNodeScanServiceServer).TriggerNetworkScan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.pojtinger.felix.liwasc.NetworkAndNodeScanService/TriggerNetworkScan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkAndNodeScanServiceServer).TriggerNetworkScan(ctx, req.(*NetworkScanTriggerMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkAndNodeScanService_TriggerNodeScan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeScanTriggerMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkAndNodeScanServiceServer).TriggerNodeScan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.pojtinger.felix.liwasc.NetworkAndNodeScanService/TriggerNodeScan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkAndNodeScanServiceServer).TriggerNodeScan(ctx, req.(*NodeScanTriggerMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkAndNodeScanService_SubscribeToNewNodes_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(NetworkScanReferenceMessage)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NetworkAndNodeScanServiceServer).SubscribeToNewNodes(m, &networkAndNodeScanServiceSubscribeToNewNodesServer{stream})
}

type NetworkAndNodeScanService_SubscribeToNewNodesServer interface {
	Send(*DiscoveredNodeMessage) error
	grpc.ServerStream
}

type networkAndNodeScanServiceSubscribeToNewNodesServer struct {
	grpc.ServerStream
}

func (x *networkAndNodeScanServiceSubscribeToNewNodesServer) Send(m *DiscoveredNodeMessage) error {
	return x.ServerStream.SendMsg(m)
}

func _NetworkAndNodeScanService_SubscribeToNewOpenServices_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(NodeScanReferenceMessage)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NetworkAndNodeScanServiceServer).SubscribeToNewOpenServices(m, &networkAndNodeScanServiceSubscribeToNewOpenServicesServer{stream})
}

type NetworkAndNodeScanService_SubscribeToNewOpenServicesServer interface {
	Send(*DiscoveredServiceMessage) error
	grpc.ServerStream
}

type networkAndNodeScanServiceSubscribeToNewOpenServicesServer struct {
	grpc.ServerStream
}

func (x *networkAndNodeScanServiceSubscribeToNewOpenServicesServer) Send(m *DiscoveredServiceMessage) error {
	return x.ServerStream.SendMsg(m)
}

func _NetworkAndNodeScanService_DeleteNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeDeleteMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkAndNodeScanServiceServer).DeleteNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.pojtinger.felix.liwasc.NetworkAndNodeScanService/DeleteNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkAndNodeScanServiceServer).DeleteNode(ctx, req.(*NodeDeleteMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _NetworkAndNodeScanService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "com.pojtinger.felix.liwasc.NetworkAndNodeScanService",
	HandlerType: (*NetworkAndNodeScanServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TriggerNetworkScan",
			Handler:    _NetworkAndNodeScanService_TriggerNetworkScan_Handler,
		},
		{
			MethodName: "TriggerNodeScan",
			Handler:    _NetworkAndNodeScanService_TriggerNodeScan_Handler,
		},
		{
			MethodName: "DeleteNode",
			Handler:    _NetworkAndNodeScanService_DeleteNode_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeToNewNodes",
			Handler:       _NetworkAndNodeScanService_SubscribeToNewNodes_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeToNewOpenServices",
			Handler:       _NetworkAndNodeScanService_SubscribeToNewOpenServices_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "network_and_node_scan.proto",
}
